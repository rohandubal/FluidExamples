{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Users\\\\sdeshpande\\\\Documents\\\\FluidExamples\\\\angular-demo\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\n\n/*!\n * Copyright (c) Microsoft Corporation and contributors. All rights reserved.\n * Licensed under the MIT License.\n */\nimport { BaseContainerRuntimeFactory, DataObject, DataObjectFactory, defaultRouteRequestHandler } from \"@fluidframework/aqueduct\";\nimport { FlushMode } from \"@fluidframework/runtime-definitions\";\nimport { requestFluidObject } from \"@fluidframework/runtime-utils\";\nimport { isDataObjectClass, isSharedObjectClass, parseDataObjectsFromSharedObjects } from \"./utils\";\n/**\n * The entry-point/root collaborative object of the Fluid Container.\n * This class abstracts the dynamic code required to build a Fluid Container into a static representation\n * for end customers.\n */\n\nexport class RootDataObject extends DataObject {\n  constructor() {\n    super(...arguments);\n    this.initialObjectsDirKey = \"initial-objects-key\";\n    this._initialObjects = {};\n  }\n\n  get initialObjectsDir() {\n    const dir = this.root.getSubDirectory(this.initialObjectsDirKey);\n\n    if (dir === undefined) {\n      throw new Error(\"InitialObjects sub-directory was not initialized\");\n    }\n\n    return dir;\n  }\n  /**\n   * The first time this object is initialized, creates each object identified in\n   * {@link RootDataObjectProps.initialObjects} and stores them as unique values in the root directory.\n   *\n   * See {@link @fluidframework/aqueduct#PureDataObject.initializingFirstTime}\n   */\n\n\n  initializingFirstTime(props) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      _this.root.createSubDirectory(_this.initialObjectsDirKey); // Create initial objects provided by the developer\n\n\n      const initialObjectsP = [];\n      Object.entries(props.initialObjects).forEach(([id, objectClass]) => {\n        const createObject = /*#__PURE__*/function () {\n          var _ref = _asyncToGenerator(function* () {\n            const obj = yield _this.create(objectClass);\n\n            _this.initialObjectsDir.set(id, obj.handle);\n          });\n\n          return function createObject() {\n            return _ref.apply(this, arguments);\n          };\n        }();\n\n        initialObjectsP.push(createObject());\n      });\n      yield Promise.all(initialObjectsP);\n    })();\n  }\n  /**\n   * Every time an instance is initialized, loads all of the initial objects in the root directory so they can be\n   * accessed immediately.\n   *\n   * See {@link @fluidframework/aqueduct#PureDataObject.hasInitialized}\n   */\n\n\n  hasInitialized() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      // We will always load the initial objects so they are available to the developer\n      const loadInitialObjectsP = [];\n\n      for (const [key, value] of Array.from(_this2.initialObjectsDir.entries())) {\n        const loadDir = /*#__PURE__*/function () {\n          var _ref2 = _asyncToGenerator(function* () {\n            const obj = yield value.get();\n            Object.assign(_this2._initialObjects, {\n              [key]: obj\n            });\n          });\n\n          return function loadDir() {\n            return _ref2.apply(this, arguments);\n          };\n        }();\n\n        loadInitialObjectsP.push(loadDir());\n      }\n\n      yield Promise.all(loadInitialObjectsP);\n    })();\n  }\n  /**\n   * Provides a record of the initial objects defined on creation.\n   * See {@link RootDataObject.initializingFirstTime}\n   */\n\n\n  get initialObjects() {\n    if (Object.keys(this._initialObjects).length === 0) {\n      throw new Error(\"Initial Objects were not correctly initialized\");\n    }\n\n    return this._initialObjects;\n  }\n  /**\n   * Dynamically creates a new detached collaborative object (DDS/DataObject).\n   * @param objectClass - Type of the collaborative object to be created.\n   */\n\n\n  create(objectClass) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      if (isDataObjectClass(objectClass)) {\n        return _this3.createDataObject(objectClass);\n      } else if (isSharedObjectClass(objectClass)) {\n        return _this3.createSharedObject(objectClass);\n      }\n\n      throw new Error(\"Could not create new Fluid object because an unknown object was passed\");\n    })();\n  }\n\n  createDataObject(dataObjectClass) {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      const factory = dataObjectClass.factory;\n      const packagePath = [..._this4.context.packagePath, factory.type];\n      const router = yield _this4.context.containerRuntime.createDataStore(packagePath);\n      return requestFluidObject(router, \"/\");\n    })();\n  }\n\n  createSharedObject(sharedObjectClass) {\n    const factory = sharedObjectClass.getFactory();\n    const obj = this.runtime.createChannel(undefined, factory.type);\n    return obj;\n  }\n\n}\nconst rootDataStoreId = \"rootDOId\";\n/**\n * Container code that provides a single {@link RootDataObject}.  This data object is\n * dynamically customized (registry and initial objects) based on the schema provided to the container runtime factory.\n */\n\nexport class DOProviderContainerRuntimeFactory extends BaseContainerRuntimeFactory {\n  constructor(schema) {\n    const [registryEntries, sharedObjects] = parseDataObjectsFromSharedObjects(schema);\n    const rootDataObjectFactory = new DataObjectFactory(\"rootDO\", RootDataObject, sharedObjects, {}, registryEntries);\n    super([rootDataObjectFactory.registryEntry], undefined, [defaultRouteRequestHandler(rootDataStoreId)], // temporary workaround to disable message batching until the message batch size issue is resolved\n    // resolution progress is tracked by the Feature 465 work item in AzDO\n    {\n      flushMode: FlushMode.Immediate\n    });\n    this.rootDataObjectFactory = rootDataObjectFactory;\n    this.initialObjects = schema.initialObjects;\n  }\n  /**\n   * {@inheritDoc @fluidframework/aqueduct#BaseContainerRuntimeFactory.containerInitializingFirstTime}\n   */\n\n\n  containerInitializingFirstTime(runtime) {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      // The first time we create the container we create the RootDataObject\n      yield _this5.rootDataObjectFactory.createRootInstance(rootDataStoreId, runtime, {\n        initialObjects: _this5.initialObjects\n      });\n    })();\n  }\n\n} //# sourceMappingURL=rootDataObject.js.map","map":null,"metadata":{},"sourceType":"module"}
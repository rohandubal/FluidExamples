{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Users\\\\sdeshpande\\\\Documents\\\\FluidExamples\\\\angular-demo\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\n\n/*!\n * Copyright (c) Microsoft Corporation and contributors. All rights reserved.\n * Licensed under the MIT License.\n */\nimport { TypedEventEmitter } from \"@fluidframework/common-utils\";\n/**\n * Base {@link IFluidContainer} implementation.\n *\n * @remarks Note: this implementation is not complete. Consumers who rely on {@link IFluidContainer.attach}\n * will need to utilize or provide a service-specific implementation of this type that implements that method.\n */\n\nexport class FluidContainer extends TypedEventEmitter {\n  constructor(container, rootDataObject) {\n    super();\n    this.container = container;\n    this.rootDataObject = rootDataObject;\n\n    this.connectedHandler = () => this.emit(\"connected\");\n\n    this.disconnectedHandler = () => this.emit(\"disconnected\");\n\n    this.disposedHandler = error => this.emit(\"disposed\", error);\n\n    this.savedHandler = () => this.emit(\"saved\");\n\n    this.dirtyHandler = () => this.emit(\"dirty\");\n\n    container.on(\"connected\", this.connectedHandler);\n    container.on(\"closed\", this.disposedHandler);\n    container.on(\"disconnected\", this.disconnectedHandler);\n    container.on(\"saved\", this.savedHandler);\n    container.on(\"dirty\", this.dirtyHandler);\n  }\n  /**\n   * {@inheritDoc IFluidContainer.isDirty}\n   */\n\n\n  get isDirty() {\n    return this.container.isDirty;\n  }\n  /**\n   * {@inheritDoc IFluidContainer.attachState}\n   */\n\n\n  get attachState() {\n    return this.container.attachState;\n  }\n  /**\n   * {@inheritDoc IFluidContainer.disposed}\n   */\n\n\n  get disposed() {\n    return this.container.closed;\n  }\n  /**\n   * {@inheritDoc IFluidContainer.connectionState}\n   */\n\n\n  get connectionState() {\n    return this.container.connectionState;\n  }\n  /**\n   * {@inheritDoc IFluidContainer.initialObjects}\n   */\n\n\n  get initialObjects() {\n    return this.rootDataObject.initialObjects;\n  }\n  /**\n   * Incomplete base implementation of {@link IFluidContainer.attach}.\n   * @remarks Note: this implementation will unconditionally throw.\n   * Consumers who rely on this will need to utilize or provide a service specific implementation of this base type\n   * that provides an implementation of this method.\n   *\n   * The reason is because externally we are presenting a separation between the service and the `FluidContainer`,\n   * but internally this separation is not there.\n   */\n\n\n  attach() {\n    return _asyncToGenerator(function* () {\n      throw new Error(\"Cannot attach container. Container is not in detached state\");\n    })();\n  }\n  /**\n   * {@inheritDoc IFluidContainer.connect}\n   */\n\n\n  connect() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      var _a, _b;\n\n      (_b = (_a = _this.container).connect) === null || _b === void 0 ? void 0 : _b.call(_a);\n    })();\n  }\n  /**\n   * {@inheritDoc IFluidContainer.connect}\n   */\n\n\n  disconnect() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      var _a, _b;\n\n      (_b = (_a = _this2.container).disconnect) === null || _b === void 0 ? void 0 : _b.call(_a);\n    })();\n  }\n  /**\n   * {@inheritDoc IFluidContainer.create}\n   */\n\n\n  create(objectClass) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      return _this3.rootDataObject.create(objectClass);\n    })();\n  }\n  /**\n   * {@inheritDoc IFluidContainer.dispose}\n   */\n\n\n  dispose() {\n    this.container.close();\n    this.container.off(\"connected\", this.connectedHandler);\n    this.container.off(\"closed\", this.disposedHandler);\n    this.container.off(\"disconnected\", this.disconnectedHandler);\n    this.container.off(\"saved\", this.savedHandler);\n    this.container.off(\"dirty\", this.dirtyHandler);\n  }\n\n} //# sourceMappingURL=fluidContainer.js.map","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Users\\\\sdeshpande\\\\Documents\\\\FluidExamples\\\\angular-demo\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\n\n/*!\n * Copyright (c) Microsoft Corporation and contributors. All rights reserved.\n * Licensed under the MIT License.\n */\nimport { DocumentDeltaConnection } from \"@fluidframework/driver-base\";\nimport { errorObjectFromSocketError } from \"./errorUtils\";\nimport { pkgVersion as driverVersion } from \"./packageVersion\";\nconst protocolVersions = [\"^0.4.0\", \"^0.3.0\", \"^0.2.0\", \"^0.1.0\"];\n/**\n * Wrapper over the shared one for driver specific translation.\n */\n\nexport class R11sDocumentDeltaConnection extends DocumentDeltaConnection {\n  static create(tenantId, id, token, io, client, url, logger, timeoutMs = 20000) {\n    return _asyncToGenerator(function* () {\n      const socket = io(url, {\n        query: {\n          documentId: id,\n          tenantId\n        },\n        reconnection: false,\n        // Default to websocket connection, with long-polling disabled\n        transports: [\"websocket\"],\n        timeout: timeoutMs\n      });\n      const connectMessage = {\n        client,\n        id,\n        mode: client.mode,\n        tenantId,\n        token,\n        versions: protocolVersions,\n        relayUserAgent: [client.details.environment, ` driverVersion:${driverVersion}`].join(\";\")\n      }; // TODO: expose to host at factory level\n\n      const enableLongPollingDowngrades = true;\n      const deltaConnection = new R11sDocumentDeltaConnection(socket, id, logger, enableLongPollingDowngrades);\n      yield deltaConnection.initialize(connectMessage, timeoutMs);\n      return deltaConnection;\n    })();\n  }\n  /**\n   * Error raising for socket.io issues\n   */\n\n\n  createErrorObject(handler, error, canRetry = true) {\n    // Note: we suspect the incoming error object is either:\n    // - a socketError: add it to the R11sError object for driver to be able to parse it and reason over it.\n    // - anything else: let base class handle it\n    if (canRetry && Number.isInteger(error === null || error === void 0 ? void 0 : error.code) && typeof (error === null || error === void 0 ? void 0 : error.message) === \"string\") {\n      return errorObjectFromSocketError(error, handler);\n    } else {\n      return super.createErrorObject(handler, error, canRetry);\n    }\n  }\n\n} //# sourceMappingURL=documentDeltaConnection.js.map","map":null,"metadata":{},"sourceType":"module"}
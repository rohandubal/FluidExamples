{"ast":null,"code":"/*!\n * Copyright (c) Microsoft Corporation and contributors. All rights reserved.\n * Licensed under the MIT License.\n */\nimport { parseHandles, serializeHandles, ValueType } from \"@fluidframework/shared-object-base\";\nexport function makeSerializable(localValue, serializer, bind) {\n  const value = localValue.makeSerialized(serializer, bind);\n  return {\n    type: value.type,\n    value: value.value && JSON.parse(value.value)\n  };\n}\n/**\n * Manages a contained plain value.  May also contain shared object handles.\n */\n\nexport class PlainLocalValue {\n  /**\n   * Create a new PlainLocalValue.\n   * @param value - The value to store, which may contain shared object handles\n   */\n  constructor(value) {\n    this.value = value;\n  }\n  /**\n   * {@inheritDoc ILocalValue.\"type\"}\n   */\n\n\n  get type() {\n    return ValueType[ValueType.Plain];\n  }\n  /**\n   * {@inheritDoc ILocalValue.makeSerialized}\n   */\n\n\n  makeSerialized(serializer, bind) {\n    // Stringify to convert to the serialized handle values - and then parse in order to create\n    // a POJO for the op\n    const value = serializeHandles(this.value, serializer, bind);\n    return {\n      type: this.type,\n      value\n    };\n  }\n\n}\n/**\n * A LocalValueMaker enables a container type DDS to produce and store local values with minimal awareness of how\n * those objects are stored, serialized, and deserialized.\n */\n\nexport class LocalValueMaker {\n  /**\n   * Create a new LocalValueMaker.\n   * @param serializer - The serializer to serialize / parse handles.\n   */\n  constructor(serializer) {\n    this.serializer = serializer;\n  }\n  /**\n   * Create a new local value from an incoming serialized value.\n   * @param serializable - The serializable value to make local\n   */\n\n\n  fromSerializable(serializable) {\n    // Migrate from old shared value to handles\n    if (serializable.type === ValueType[ValueType.Shared]) {\n      serializable.type = ValueType[ValueType.Plain];\n      const handle = {\n        type: \"__fluid_handle__\",\n        url: serializable.value\n      };\n      serializable.value = handle;\n    }\n\n    const translatedValue = parseHandles(serializable.value, this.serializer);\n    return new PlainLocalValue(translatedValue);\n  }\n  /**\n   * Create a new local value containing a given plain object.\n   * @param value - The value to store\n   * @returns An ILocalValue containing the value\n   */\n\n\n  fromInMemory(value) {\n    return new PlainLocalValue(value);\n  }\n\n} //# sourceMappingURL=localValues.js.map","map":null,"metadata":{},"sourceType":"module"}
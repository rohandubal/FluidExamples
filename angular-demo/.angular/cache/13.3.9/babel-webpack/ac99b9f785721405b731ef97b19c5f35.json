{"ast":null,"code":"/**\n * The Request Parser takes an IRequest provides parsing and sub request creation\n */\nexport class RequestParser {\n  constructor(request) {\n    this.request = request;\n    const queryStartIndex = this.request.url.indexOf(\"?\");\n\n    if (queryStartIndex >= 0) {\n      this.query = this.request.url.substring(queryStartIndex);\n    } else {\n      this.query = \"\";\n    }\n  }\n  /**\n   * Splits the path of the url and decodes each path part\n   * @param url - the url to get path parts of\n   */\n\n\n  static getPathParts(url) {\n    const queryStartIndex = url.indexOf(\"?\");\n    return url.substring(0, queryStartIndex < 0 ? url.length : queryStartIndex).split(\"/\").reduce((pv, cv) => {\n      if (cv !== undefined && cv.length > 0) {\n        pv.push(decodeURIComponent(cv));\n      }\n\n      return pv;\n    }, []);\n  }\n\n  static create(request) {\n    // Perf optimizations.\n    if (request instanceof RequestParser) {\n      return request;\n    }\n\n    return new RequestParser(request);\n  }\n\n  get url() {\n    return this.request.url;\n  }\n\n  get headers() {\n    return this.request.headers;\n  }\n  /**\n   * Returns the decoded path parts of the request's url\n   */\n\n\n  get pathParts() {\n    if (this.requestPathParts === undefined) {\n      this.requestPathParts = RequestParser.getPathParts(this.url);\n    }\n\n    return this.requestPathParts;\n  }\n  /**\n   * Returns true if it's a terminating path, i.e. no more elements after `elements` entries and empty query.\n   * @param elements - number of elements in path\n   */\n\n\n  isLeaf(elements) {\n    return this.query === \"\" && this.pathParts.length === elements;\n  }\n  /**\n   * Creates a sub request starting at a specific path part of this request's url\n   * The sub request url always has a leading slash, and always include query params if original url has any\n   * e.g. original url is /a/b/?queryParams, createSubRequest(0) is /a/b/?queryParams\n   * createSubRequest(1) is /b/?queryParams\n   * createSubRequest(2) is /?queryParams\n   * createSubRequest(n) where n is bigger than parts length, e.g. 2, or n is less than 0 will throw an exception\n   *\n   * note: query params are not counted towards path parts.\n   *\n   * @param startingPathIndex - The index of the first path part of the sub request\n   */\n\n\n  createSubRequest(startingPathIndex) {\n    const pathLen = this.pathParts.length;\n\n    if (startingPathIndex < 0 || startingPathIndex > pathLen) {\n      throw new Error(\"incorrect sub-request\");\n    }\n\n    if (startingPathIndex === pathLen && this.url.includes(\"?\")) {\n      return {\n        url: `/${this.query}`,\n        headers: this.headers\n      };\n    }\n\n    const path = `/${this.pathParts.slice(startingPathIndex).join(\"/\")}`;\n    return {\n      url: this.query === \"\" ? path : `${path}/${this.query}`,\n      headers: this.headers\n    };\n  }\n\n} //# sourceMappingURL=requestParser.js.map","map":null,"metadata":{},"sourceType":"module"}
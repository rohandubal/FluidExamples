{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Users\\\\sdeshpande\\\\Documents\\\\FluidExamples\\\\angular-demo\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\n\n/*!\n * Copyright (c) Microsoft Corporation and contributors. All rights reserved.\n * Licensed under the MIT License.\n */\nimport { FluidDataStoreRegistry, ContainerRuntime } from \"@fluidframework/container-runtime\";\nimport { IContainerRuntime } from \"@fluidframework/container-runtime-definitions\";\nimport { buildRuntimeRequestHandler } from \"@fluidframework/request-handler\";\nimport { DependencyContainer } from \"@fluidframework/synthesize\";\nimport { RuntimeFactoryHelper } from \"@fluidframework/runtime-utils\";\n/**\n * BaseContainerRuntimeFactory produces container runtimes with a given data store and service registry, as well as\n * given request handlers.  It can be subclassed to implement a first-time initialization procedure for the containers\n * it creates.\n */\n\nexport class BaseContainerRuntimeFactory extends RuntimeFactoryHelper {\n  /**\n   * @param registryEntries - The data store registry for containers produced\n   * @param serviceRegistry - The service registry for containers produced\n   * @param requestHandlers - Request handlers for containers produced\n   * @param runtimeOptions - The runtime options passed to the ContainerRuntime when instantiating it\n   */\n  constructor(registryEntries, dependencyContainer, requestHandlers = [], runtimeOptions) {\n    super();\n    this.registryEntries = registryEntries;\n    this.dependencyContainer = dependencyContainer;\n    this.requestHandlers = requestHandlers;\n    this.runtimeOptions = runtimeOptions;\n    this.registry = new FluidDataStoreRegistry(registryEntries);\n  }\n\n  get IFluidDataStoreRegistry() {\n    return this.registry;\n  }\n\n  instantiateFirstTime(runtime) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this.containerInitializingFirstTime(runtime);\n      yield _this.containerHasInitialized(runtime);\n    })();\n  }\n\n  instantiateFromExisting(runtime) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this2.containerHasInitialized(runtime);\n    })();\n  }\n\n  preInitialize(context, existing) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      const scope = context.scope;\n      const dc = new DependencyContainer(_this3.dependencyContainer, scope.IFluidDependencySynthesizer);\n      scope.IFluidDependencySynthesizer = dc;\n      const runtime = yield ContainerRuntime.load(context, _this3.registryEntries, buildRuntimeRequestHandler(..._this3.requestHandlers), _this3.runtimeOptions, scope, existing); // we register the runtime so developers of providers can use it in the factory pattern.\n\n      dc.register(IContainerRuntime, runtime);\n      return runtime;\n    })();\n  }\n  /**\n   * Subclasses may override containerInitializingFirstTime to perform any setup steps at the time the container\n   * is created. This likely includes creating any initial data stores that are expected to be there at the outset.\n   * @param runtime - The container runtime for the container being initialized\n   */\n\n\n  containerInitializingFirstTime(runtime) {\n    return _asyncToGenerator(function* () {})();\n  }\n  /**\n   * Subclasses may override containerHasInitialized to perform any steps after the container has initialized.\n   * This likely includes loading any data stores that are expected to be there at the outset.\n   * @param runtime - The container runtime for the container being initialized\n   */\n\n\n  containerHasInitialized(runtime) {\n    return _asyncToGenerator(function* () {})();\n  }\n\n} //# sourceMappingURL=baseContainerRuntimeFactory.js.map","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"/*!\n * Copyright (c) Microsoft Corporation and contributors. All rights reserved.\n * Licensed under the MIT License.\n */\nimport { serializeHandles } from \"@fluidframework/shared-object-base\";\nexport function makeSerializable(localValue, serializer, bind) {\n  const value = localValue.makeSerialized(serializer, bind);\n  return {\n    type: value.type,\n    value: value.value && JSON.parse(value.value)\n  };\n}\n/**\n * Manages a contained value type.\n *\n * @alpha\n */\n\nexport class ValueTypeLocalValue {\n  /**\n   * Create a new ValueTypeLocalValue.\n   * @param value - The instance of the value type stored within\n   * @param valueType - The type object of the value type stored within\n   */\n  constructor(value, valueType) {\n    this.value = value;\n    this.valueType = valueType;\n  }\n  /**\n   * {@inheritDoc ILocalValue.\"type\"}\n   */\n\n\n  get type() {\n    return this.valueType.name;\n  }\n  /**\n   * {@inheritDoc ILocalValue.makeSerialized}\n   */\n\n\n  makeSerialized(serializer, bind) {\n    const storedValueType = this.valueType.factory.store(this.value);\n    const value = serializeHandles(storedValueType, serializer, bind);\n    return {\n      type: this.type,\n      value\n    };\n  }\n  /**\n   * Get the handler for a given op of this value type.\n   * @param opName - The name of the operation that needs processing\n   * @returns The object which can process the given op\n   */\n\n\n  getOpHandler(opName) {\n    const handler = this.valueType.ops.get(opName);\n\n    if (!handler) {\n      throw new Error(\"Unknown type message\");\n    }\n\n    return handler;\n  }\n\n} //# sourceMappingURL=localValues.js.map","map":null,"metadata":{},"sourceType":"module"}
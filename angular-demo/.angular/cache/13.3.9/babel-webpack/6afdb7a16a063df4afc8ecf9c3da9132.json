{"ast":null,"code":"/*!\n * Copyright (c) Microsoft Corporation and contributors. All rights reserved.\n * Licensed under the MIT License.\n */\n\n/**\n * Null logger\n * It can be used in places where logger instance is required, but events should be not send over.\n */\nexport class BaseTelemetryNullLogger {\n  /**\n   * Send an event with the logger\n   *\n   * @param event - the event to send\n   */\n  send(event) {\n    return;\n  }\n\n}\n/**\n * Null logger\n * It can be used in places where logger instance is required, but events should be not send over.\n */\n\nexport class TelemetryNullLogger {\n  send(event) {}\n\n  sendTelemetryEvent(event, error) {}\n\n  sendErrorEvent(event, error) {}\n\n  sendPerformanceEvent(event, error) {}\n\n}\nexport function extractLogSafeErrorProperties(error) {\n  const isRegularObject = value => {\n    return value !== null && !Array.isArray(value) && typeof value === \"object\";\n  };\n\n  const removeMessageFromStack = (stack, errorName) => {\n    const stackFrames = stack.split(\"\\n\");\n    stackFrames.shift(); // Remove \"[ErrorName]: [ErrorMessage]\"\n\n    if (errorName !== undefined) {\n      stackFrames.unshift(errorName); // Add \"[ErrorName]\"\n    }\n\n    return stackFrames.join(\"\\n\");\n  };\n\n  const message = typeof (error === null || error === void 0 ? void 0 : error.message) === \"string\" ? error.message : String(error);\n  const safeProps = {\n    message\n  };\n\n  if (isRegularObject(error)) {\n    const {\n      errorType,\n      stack,\n      name\n    } = error;\n\n    if (typeof errorType === \"string\") {\n      safeProps.errorType = errorType;\n    }\n\n    if (typeof stack === \"string\") {\n      const errorName = typeof name === \"string\" ? name : undefined;\n      safeProps.stack = removeMessageFromStack(stack, errorName);\n    }\n  }\n\n  return safeProps;\n} //# sourceMappingURL=logger.js.map","map":null,"metadata":{},"sourceType":"module"}
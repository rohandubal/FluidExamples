{"ast":null,"code":"/*!\n * Copyright (c) Microsoft Corporation and contributors. All rights reserved.\n * Licensed under the MIT License.\n */\nimport { NonRetryableError, GenericNetworkError, createGenericNetworkError, AuthorizationError } from \"@fluidframework/driver-utils\";\nimport { pkgVersion as driverVersion } from \"./packageVersion\";\nexport var R11sErrorType = /*#__PURE__*/(() => {\n  (function (R11sErrorType) {\n    R11sErrorType[\"fileNotFoundOrAccessDeniedError\"] = \"fileNotFoundOrAccessDeniedError\";\n  })(R11sErrorType || (R11sErrorType = {}));\n\n  return R11sErrorType;\n})();\nexport function createR11sNetworkError(errorMessage, statusCode, retryAfterMs) {\n  const props = {\n    statusCode,\n    driverVersion\n  };\n\n  switch (statusCode) {\n    case undefined:\n      // If a service is temporarily down or a browser resource limit is reached, RestWrapper will throw\n      // a network error with no status code (e.g. err:ERR_CONN_REFUSED or err:ERR_FAILED) and\n      // the error message will start with NetworkError as defined in restWrapper.ts\n      return new GenericNetworkError(errorMessage, errorMessage.startsWith(\"NetworkError\"), props);\n\n    case 401: // The first 401 is manually retried in RouterliciousRestWrapper with a refreshed token,\n    // so we treat repeat 401s the same as 403.\n\n    case 403:\n      return new AuthorizationError(errorMessage, undefined, undefined, props);\n\n    case 404:\n      const errorType = R11sErrorType.fileNotFoundOrAccessDeniedError;\n      return new NonRetryableError(errorMessage, errorType, props);\n\n    case 429:\n      return createGenericNetworkError(errorMessage, {\n        canRetry: true,\n        retryAfterMs\n      }, props);\n\n    case 500:\n    case 502:\n      return new GenericNetworkError(errorMessage, true, props);\n\n    default:\n      const retryInfo = {\n        canRetry: retryAfterMs !== undefined,\n        retryAfterMs\n      };\n      return createGenericNetworkError(errorMessage, retryInfo, props);\n  }\n}\nexport function throwR11sNetworkError(errorMessage, statusCode, retryAfterMs) {\n  const networkError = createR11sNetworkError(errorMessage, statusCode, retryAfterMs); // eslint-disable-next-line @typescript-eslint/no-throw-literal\n\n  throw networkError;\n}\n/**\n * Returns network error based on error object from R11s socket (IR11sSocketError)\n */\n\nexport function errorObjectFromSocketError(socketError, handler) {\n  // pre-0.58 error message prefix: R11sSocketError\n  const message = `R11s socket error (${handler}): ${socketError.message}`;\n  return createR11sNetworkError(message, socketError.code, socketError.retryAfterMs);\n} //# sourceMappingURL=errorUtils.js.map","map":null,"metadata":{},"sourceType":"module"}
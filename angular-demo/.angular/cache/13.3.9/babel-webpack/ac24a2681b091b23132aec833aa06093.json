{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Users\\\\sdeshpande\\\\Documents\\\\FluidExamples\\\\angular-demo\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\n\n/*!\n * Copyright (c) Microsoft Corporation and contributors. All rights reserved.\n * Licensed under the MIT License.\n */\n\n/**\n * This class wraps the actual storage and make sure no wrong apis are called according to\n * container attach state.\n */\nexport class ContainerStorageAdapter {\n  constructor(storageGetter) {\n    this.storageGetter = storageGetter;\n    this.blobContents = {};\n  }\n\n  loadSnapshotForRehydratingContainer(snapshotTree) {\n    this.getBlobContents(snapshotTree);\n  }\n\n  getBlobContents(snapshotTree) {\n    for (const [id, value] of Object.entries(snapshotTree.blobsContents)) {\n      this.blobContents[id] = value;\n    }\n\n    for (const [_, tree] of Object.entries(snapshotTree.trees)) {\n      this.getBlobContents(tree);\n    }\n  }\n\n  get policies() {\n    // back-compat 0.40 containerRuntime requests policies even in detached container if storage is present\n    // and storage is always present in >=0.41.\n    try {\n      return this.storageGetter().policies;\n    } catch (e) {}\n\n    return undefined;\n  }\n\n  get repositoryUrl() {\n    return this.storageGetter().repositoryUrl;\n  }\n\n  getSnapshotTree(version, scenarioName) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      return _this.storageGetter().getSnapshotTree(version, scenarioName);\n    })();\n  }\n\n  readBlob(id) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      const blob = _this2.blobContents[id];\n\n      if (blob !== undefined) {\n        return blob;\n      }\n\n      return _this2.storageGetter().readBlob(id);\n    })();\n  }\n\n  getVersions(versionId, count, scenarioName) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      return _this3.storageGetter().getVersions(versionId, count, scenarioName);\n    })();\n  }\n\n  uploadSummaryWithContext(summary, context) {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      return _this4.storageGetter().uploadSummaryWithContext(summary, context);\n    })();\n  }\n\n  downloadSummary(handle) {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      return _this5.storageGetter().downloadSummary(handle);\n    })();\n  }\n\n  createBlob(file) {\n    var _this6 = this;\n\n    return _asyncToGenerator(function* () {\n      return _this6.storageGetter().createBlob(file);\n    })();\n  }\n\n}\n/**\n * Storage which only supports createBlob() and readBlob(). This is used with IDetachedBlobStorage to support\n * blobs in detached containers.\n */\n\nexport class BlobOnlyStorage {\n  constructor(blobStorage, logger) {\n    this.blobStorage = blobStorage;\n    this.logger = logger;\n    /* eslint-disable @typescript-eslint/unbound-method */\n\n    this.getSnapshotTree = this.notCalled;\n    this.getVersions = this.notCalled;\n    this.write = this.notCalled;\n    this.uploadSummaryWithContext = this.notCalled;\n    this.downloadSummary = this.notCalled;\n  }\n\n  createBlob(content) {\n    var _this7 = this;\n\n    return _asyncToGenerator(function* () {\n      return _this7.blobStorage.createBlob(content);\n    })();\n  }\n\n  readBlob(blobId) {\n    var _this8 = this;\n\n    return _asyncToGenerator(function* () {\n      return _this8.blobStorage.readBlob(blobId);\n    })();\n  }\n\n  get policies() {\n    return this.notCalled();\n  }\n\n  get repositoryUrl() {\n    return this.notCalled();\n  }\n  /* eslint-enable @typescript-eslint/unbound-method */\n\n\n  notCalled() {\n    try {\n      // some browsers may not populate stack unless exception is thrown\n      throw new Error(\"BlobOnlyStorage not implemented method used\");\n    } catch (err) {\n      this.logger.sendErrorEvent({\n        eventName: \"BlobOnlyStorageWrongCall\"\n      }, err);\n      throw err;\n    }\n  }\n\n} //# sourceMappingURL=containerStorageAdapter.js.map","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Users\\\\sdeshpande\\\\Documents\\\\FluidExamples\\\\angular-demo\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\n\n/*!\n * Copyright (c) Microsoft Corporation and contributors. All rights reserved.\n * Licensed under the MIT License.\n */\nimport { assert } from \"@fluidframework/common-utils\";\nimport { RequestParser } from \"@fluidframework/runtime-utils\";\n/**\n * A request handler to expose access to all root data stores in the container by id.\n * @param request - the request for the root data store.  The first path part must be the data store's ID.\n * @param runtime - the container runtime\n * @returns the result of the request\n */\n\nexport const rootDataStoreRequestHandler = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(function* (request, runtime) {\n    var _a;\n\n    const requestParser = RequestParser.create(request);\n    const id = requestParser.pathParts[0];\n    const wait = typeof ((_a = request.headers) === null || _a === void 0 ? void 0 : _a.wait) === \"boolean\" ? request.headers.wait : undefined;\n    let rootDataStore;\n\n    try {\n      // getRootDataStore currently throws if the data store is not found\n      rootDataStore = yield runtime.getRootDataStore(id, wait);\n    } catch (error) {\n      return undefined; // continue search\n    }\n\n    try {\n      return rootDataStore.IFluidRouter.request(requestParser.createSubRequest(1));\n    } catch (error) {\n      return {\n        status: 500,\n        mimeType: \"fluid/object\",\n        value: error\n      };\n    }\n  });\n\n  return function rootDataStoreRequestHandler(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport const createFluidObjectResponse = fluidObject => {\n  return {\n    status: 200,\n    mimeType: \"fluid/object\",\n    value: fluidObject\n  };\n};\n\nclass LegacyUriHandle {\n  constructor(absolutePath, runtime) {\n    this.absolutePath = absolutePath;\n    this.runtime = runtime;\n    this.isAttached = true;\n  }\n\n  get IFluidHandle() {\n    return this;\n  }\n\n  attachGraph() {\n    assert(false, 0x0ca\n    /* \"Trying to use legacy graph attach!\" */\n    );\n  }\n\n  get() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const response = yield _this.runtime.IFluidHandleContext.resolveHandle({\n        url: _this.absolutePath\n      });\n\n      if (response.status === 200 && response.mimeType === \"fluid/object\") {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n        return response.value;\n      }\n\n      throw new Error(`Failed to resolve container path ${_this.absolutePath}`);\n    })();\n  }\n\n  bind(handle) {\n    throw new Error(\"Cannot bind to LegacyUriHandle\");\n  }\n\n}\n\nexport function handleFromLegacyUri(uri, runtime) {\n  return new LegacyUriHandle(uri, runtime);\n} //# sourceMappingURL=requestHandlers.js.map","map":null,"metadata":{},"sourceType":"module"}
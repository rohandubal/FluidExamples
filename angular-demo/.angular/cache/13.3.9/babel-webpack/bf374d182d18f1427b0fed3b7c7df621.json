{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Users\\\\sdeshpande\\\\Documents\\\\FluidExamples\\\\angular-demo\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\n\n/*!\n * Copyright (c) Microsoft Corporation and contributors. All rights reserved.\n * Licensed under the MIT License.\n */\n// eslint-disable-next-line import/no-internal-modules\nimport sha1 from \"sha.js/sha1\"; // eslint-disable-next-line import/no-internal-modules\n\nimport sha256 from \"sha.js/sha256\";\n/**\n * Hash a file. Consistent within a session, but should not be persisted and\n * is not consistent with git.\n * If called under an insecure context for a browser, this will fallback to\n * using the node implementation.\n *\n * @param file - The contents of the file in a buffer\n * @param algorithm - The hash algorithm to use, artificially constrained by what is used internally\n * @param hashEncoding - The encoding of the returned hash, also artificially constrained\n * @returns The hash of the content of the buffer\n */\n\nexport function hashFile(_x) {\n  return _hashFile.apply(this, arguments);\n}\n/**\n * Create a github hash (Github hashes the string with blob and size)\n * Must be called under secure context for browsers\n *\n * @param file - The contents of the file in a buffer\n * @returns The sha1 hash of the content of the buffer with the `blob` prefix and size\n */\n\nfunction _hashFile() {\n  _hashFile = _asyncToGenerator(function* (file, algorithm = \"SHA-1\", hashEncoding = \"hex\") {\n    let engine; // eslint-disable-next-line default-case\n\n    switch (algorithm) {\n      case \"SHA-1\":\n        {\n          engine = new sha1();\n          break;\n        }\n\n      case \"SHA-256\":\n        {\n          engine = new sha256();\n          break;\n        }\n    }\n\n    return engine.update(file).digest(hashEncoding);\n  });\n  return _hashFile.apply(this, arguments);\n}\n\nexport function gitHashFile(_x2) {\n  return _gitHashFile.apply(this, arguments);\n} //# sourceMappingURL=hashFileNode.js.map\n\nfunction _gitHashFile() {\n  _gitHashFile = _asyncToGenerator(function* (file) {\n    const size = file.byteLength;\n    const filePrefix = `blob ${size.toString()}${String.fromCharCode(0)}`;\n    const engine = new sha1();\n    return engine.update(filePrefix).update(file).digest(\"hex\");\n  });\n  return _gitHashFile.apply(this, arguments);\n}","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"/*!\n * Copyright (c) Microsoft Corporation and contributors. All rights reserved.\n * Licensed under the MIT License.\n */\nimport { SummaryTreeBuilder } from \"@fluidframework/runtime-utils\";\n/**\n * Given a mostly-plain object that may have handle objects embedded within, return a string representation of an object\n * where the handle objects have been replaced with a serializable form.\n * @param value - The mostly-plain object\n * @param serializer - The serializer that knows how to convert handles into serializable format\n * @param context - The handle context for the container\n * @param bind - Bind any other handles we find in the object against this given handle.\n * @returns Result of strigifying an object\n */\n\nexport function serializeHandles(value, serializer, bind) {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n  return value !== undefined ? serializer.stringify(value, bind) : value;\n}\n/**\n * Given a mostly-plain object that may have handle objects embedded within, will return a fully-plain object\n * where any embedded IFluidHandles have been replaced with a serializable form.\n *\n * The original `input` object is not mutated.  This method will shallowly clones all objects in the path from\n * the root to any replaced handles.  (If no handles are found, returns the original object.)\n *\n * @param input - The mostly-plain object\n * @param context - The handle context for the container\n * @param bind - Bind any other handles we find in the object against this given handle.\n * @returns The fully-plain object\n */\n\nexport function makeHandlesSerializable(value, serializer, bind) {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n  return serializer.encode(value, bind);\n}\n/**\n * Given a fully-plain object that may have serializable-form handles within, will return the mostly-plain object\n * with handle objects created instead.\n * @param value - The fully-plain object\n * @param serializer - The serializer that knows how to convert serializable-form handles into handle objects\n * @param context - The handle context for the container\n * @returns The mostly-plain object with handle objects within\n */\n\nexport function parseHandles(value, serializer) {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n  return value !== undefined ? serializer.parse(JSON.stringify(value)) : value;\n}\n/**\n * Create a new summary containing one blob\n * @param key - the key for the blob in the summary\n * @param content - blob content\n * @returns The summary containing the blob\n */\n\nexport function createSingleBlobSummary(key, content) {\n  const builder = new SummaryTreeBuilder();\n  builder.addBlob(key, content);\n  return builder.getSummaryTree();\n} //# sourceMappingURL=utils.js.map","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"/*!\n * Copyright (c) Microsoft Corporation and contributors. All rights reserved.\n * Licensed under the MIT License.\n */\nimport { FileMode, TreeEntry } from \"@fluidframework/protocol-definitions\";\nexport function getQuorumTreeEntries(documentId, minimumSequenceNumber, sequenceNumber, term, quorumSnapshot) {\n  const documentAttributes = {\n    minimumSequenceNumber,\n    sequenceNumber,\n    term\n  };\n  const entries = [{\n    mode: FileMode.File,\n    path: \"quorumMembers\",\n    type: TreeEntry.Blob,\n    value: {\n      contents: JSON.stringify(quorumSnapshot.members),\n      encoding: \"utf-8\"\n    }\n  }, {\n    mode: FileMode.File,\n    path: \"quorumProposals\",\n    type: TreeEntry.Blob,\n    value: {\n      contents: JSON.stringify(quorumSnapshot.proposals),\n      encoding: \"utf-8\"\n    }\n  }, {\n    mode: FileMode.File,\n    path: \"quorumValues\",\n    type: TreeEntry.Blob,\n    value: {\n      contents: JSON.stringify(quorumSnapshot.values),\n      encoding: \"utf-8\"\n    }\n  }, {\n    mode: FileMode.File,\n    path: \"attributes\",\n    type: TreeEntry.Blob,\n    value: {\n      contents: JSON.stringify(documentAttributes),\n      encoding: \"utf-8\"\n    }\n  }];\n  return entries;\n}\nexport function mergeAppAndProtocolTree(appSummaryTree, protocolTree) {\n  const newTreeEntries = appSummaryTree.tree.filter(value => !isInvalidPath(value.path)).map(value => {\n    const createTreeEntry = {\n      mode: value.mode,\n      path: value.path,\n      sha: value.sha,\n      type: value.type\n    };\n    return createTreeEntry;\n  });\n  newTreeEntries.push({\n    mode: FileMode.Directory,\n    path: \".protocol\",\n    sha: protocolTree.sha,\n    type: \"tree\"\n  });\n  return newTreeEntries;\n}\nexport function generateServiceProtocolEntries(deli, scribe) {\n  const serviceProtocolEntries = [{\n    mode: FileMode.File,\n    path: \"deli\",\n    type: TreeEntry.Blob,\n    value: {\n      contents: deli,\n      encoding: \"utf-8\"\n    }\n  }];\n  serviceProtocolEntries.push({\n    mode: FileMode.File,\n    path: \"scribe\",\n    type: TreeEntry.Blob,\n    value: {\n      contents: scribe,\n      encoding: \"utf-8\"\n    }\n  });\n  return serviceProtocolEntries;\n}\n\nconst isInvalidPath = path => path === \".protocol\" || path === \".logTail\" || path === \".serviceProtocol\"; //# sourceMappingURL=scribeHelper.js.map","map":null,"metadata":{},"sourceType":"module"}
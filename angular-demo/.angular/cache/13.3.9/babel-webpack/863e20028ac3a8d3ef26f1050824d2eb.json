{"ast":null,"code":"/*!\n * Copyright (c) Microsoft Corporation and contributors. All rights reserved.\n * Licensed under the MIT License.\n */\nimport { assert, IsoBuffer } from \"@fluidframework/common-utils\";\nimport { SummaryType } from \"@fluidframework/protocol-definitions\";\n/**\n * Summary tree assembler (without stats collection).\n */\n\nexport class SummaryTreeAssembler {\n  constructor(props) {\n    this.props = props;\n    this.attachmentCounter = 0;\n    this.summaryTree = {};\n  }\n  /**\n  * Get final summary\n  */\n\n\n  get summary() {\n    var _a;\n\n    return {\n      type: SummaryType.Tree,\n      tree: Object.assign({}, this.summaryTree),\n      unreferenced: (_a = this.props) === null || _a === void 0 ? void 0 : _a.unreferenced\n    };\n  }\n  /**\n  * Add blob to summary\n  */\n\n\n  addBlob(key, content) {\n    this.summaryTree[key] = {\n      type: SummaryType.Blob,\n      content\n    };\n  }\n  /**\n  * Add handle to summary\n  */\n\n\n  addHandle(key, handleType, handle) {\n    this.summaryTree[key] = {\n      type: SummaryType.Handle,\n      handleType,\n      handle\n    };\n  }\n  /**\n  * Add tree to summary\n  */\n\n\n  addTree(key, summary) {\n    this.summaryTree[key] = summary;\n  }\n  /**\n  * Add attachment to summary\n  */\n\n\n  addAttachment(id) {\n    this.summaryTree[this.attachmentCounter++] = {\n      id,\n      type: SummaryType.Attachment\n    };\n  }\n\n}\n/**\n * Helper function that converts ISnapshotTree and blobs to ISummaryTree\n * @param snapshot - Source snapshot tree\n * @param blobs - Blobs cache\n * @returns Converted snapshot in ISummaryTree format\n */\n\nexport function convertSnapshotAndBlobsToSummaryTree(snapshot, blobs) {\n  const assembler = new SummaryTreeAssembler({\n    unreferenced: snapshot.unreferenced\n  });\n\n  for (const [path, id] of Object.entries(snapshot.blobs)) {\n    const blob = blobs.get(id);\n    assert(blob !== undefined, 0x2dd\n    /* \"Cannot find blob for a given id\" */\n    );\n    assembler.addBlob(path, IsoBuffer.from(blob).toString(\"utf-8\"));\n  }\n\n  for (const [key, tree] of Object.entries(snapshot.trees)) {\n    const subtree = convertSnapshotAndBlobsToSummaryTree(tree, blobs);\n    assembler.addTree(key, subtree);\n  }\n\n  return assembler.summary;\n} //# sourceMappingURL=treeUtils.js.map","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"/*!\n * Copyright (c) Microsoft Corporation and contributors. All rights reserved.\n * Licensed under the MIT License.\n */\nexport function combine(combiningInfo, currentValue, newValue, seq) {\n  let _currentValue = currentValue;\n\n  if (_currentValue === undefined) {\n    _currentValue = combiningInfo.defaultValue;\n  } // Fixed set of operations for now\n\n\n  switch (combiningInfo.name) {\n    case \"incr\":\n      _currentValue += newValue;\n\n      if (combiningInfo.minValue) {\n        if (_currentValue < combiningInfo.minValue) {\n          _currentValue = combiningInfo.minValue;\n        }\n      }\n\n      break;\n\n    case \"consensus\":\n      if (_currentValue === undefined) {\n        const cv = {\n          value: newValue,\n          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n          seq: seq\n        };\n        _currentValue = cv;\n      } else {\n        const cv = _currentValue;\n\n        if (cv.seq === -1) {\n          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n          cv.seq = seq;\n        }\n      }\n\n      break;\n\n    default:\n      break;\n  } // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n\n\n  return _currentValue;\n}\nexport function matchProperties(a, b) {\n  if (a) {\n    if (!b) {\n      return false;\n    } else {\n      // For now, straightforward; later use hashing\n      // eslint-disable-next-line no-restricted-syntax\n      for (const key in a) {\n        if (b[key] === undefined) {\n          return false;\n        } else if (typeof b[key] === \"object\") {\n          if (!matchProperties(a[key], b[key])) {\n            return false;\n          }\n        } else if (b[key] !== a[key]) {\n          return false;\n        }\n      } // eslint-disable-next-line no-restricted-syntax\n\n\n      for (const key in b) {\n        if (a[key] === undefined) {\n          return false;\n        }\n      }\n    }\n  } else {\n    if (b) {\n      return false;\n    }\n  }\n\n  return true;\n}\nexport function extend(base, extension, combiningOp, seq) {\n  if (extension !== undefined) {\n    // eslint-disable-next-line guard-for-in, no-restricted-syntax\n    for (const key in extension) {\n      const v = extension[key];\n\n      if (v === null) {\n        // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n        delete base[key];\n      } else {\n        if (combiningOp && combiningOp.name !== \"rewrite\") {\n          base[key] = combine(combiningOp, base[key], v, seq);\n        } else {\n          base[key] = v;\n        }\n      }\n    }\n  }\n\n  return base;\n}\nexport function clone(extension) {\n  if (extension === undefined) {\n    return undefined;\n  }\n\n  const cloneMap = createMap(); // eslint-disable-next-line guard-for-in, no-restricted-syntax\n\n  for (const key in extension) {\n    const v = extension[key];\n\n    if (v !== null) {\n      cloneMap[key] = v;\n    }\n  }\n\n  return cloneMap;\n}\nexport function addProperties(oldProps, newProps, op, seq) {\n  let _oldProps = oldProps;\n\n  if (!_oldProps || op && op.name === \"rewrite\") {\n    _oldProps = createMap();\n  }\n\n  extend(_oldProps, newProps, op, seq);\n  return _oldProps;\n}\nexport function extendIfUndefined(base, extension) {\n  if (extension !== undefined) {\n    // eslint-disable-next-line no-restricted-syntax\n    for (const key in extension) {\n      if (base[key] === undefined) {\n        base[key] = extension[key];\n      }\n    }\n  }\n\n  return base;\n} // Create a MapLike with good performance.\n\nexport function createMap() {\n  return Object.create(null);\n} //# sourceMappingURL=properties.js.map","map":null,"metadata":{},"sourceType":"module"}
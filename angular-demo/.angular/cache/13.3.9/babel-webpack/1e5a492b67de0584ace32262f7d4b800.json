{"ast":null,"code":"/*!\n * Copyright (c) Microsoft Corporation and contributors. All rights reserved.\n * Licensed under the MIT License.\n */\nimport { FluidObjectHandle } from \"@fluidframework/datastore\";\n/**\n * Handle for shared object\n * This object is used for already loaded (in-memory) shared object\n * and is used only for serialization purposes.\n * De-serialization process goes through FluidObjectHandle and request flow:\n * FluidDataStoreRuntime.request() recognizes requests in the form of '/\\<shared object id\\>'\n * and loads shared object.\n */\n\nexport class SharedObjectHandle extends FluidObjectHandle {\n  /**\n   * Whether services have been attached for the associated shared object.\n   */\n  get isAttached() {\n    return this.value.isAttached();\n  }\n  /**\n   * Creates a new SharedObjectHandle.\n   * @param value - The shared object this handle is for.\n   * @param path - The id of the shared object. It is also the path to this object relative to the routeContext.\n   * @param routeContext - The parent IFluidHandleContext that has a route to this handle.\n   */\n\n\n  constructor(value, path, routeContext) {\n    super(value, path, routeContext);\n  }\n  /**\n   * Attaches all bound handles first (which may in turn attach further handles), then attaches this handle.\n   * When attaching the handle, it registers the associated shared object.\n   */\n\n\n  attachGraph() {\n    this.value.bindToContext();\n    super.attachGraph();\n  }\n\n} //# sourceMappingURL=handle.js.map","map":null,"metadata":{},"sourceType":"module"}
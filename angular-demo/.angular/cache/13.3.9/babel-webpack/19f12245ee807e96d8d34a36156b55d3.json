{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Users\\\\sdeshpande\\\\Documents\\\\FluidExamples\\\\angular-demo\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\n\n/*!\n * Copyright (c) Microsoft Corporation and contributors. All rights reserved.\n * Licensed under the MIT License.\n */\nimport { assert } from \"@fluidframework/common-utils\";\nimport { GenericError } from \"@fluidframework/container-utils\";\nimport { runWithRetry } from \"@fluidframework/driver-utils\";\nexport class RetriableDocumentStorageService {\n  constructor(internalStorageService, logger) {\n    this.internalStorageService = internalStorageService;\n    this.logger = logger;\n    this._disposed = false;\n  }\n\n  get policies() {\n    return this.internalStorageService.policies;\n  }\n\n  get disposed() {\n    return this._disposed;\n  }\n\n  dispose() {\n    this._disposed = true;\n  }\n\n  get repositoryUrl() {\n    return this.internalStorageService.repositoryUrl;\n  }\n\n  getSnapshotTree(version, scenarioName) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      return _this.runWithRetry( /*#__PURE__*/_asyncToGenerator(function* () {\n        return _this.internalStorageService.getSnapshotTree(version, scenarioName);\n      }), \"storage_getSnapshotTree\");\n    })();\n  }\n\n  readBlob(id) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      return _this2.runWithRetry( /*#__PURE__*/_asyncToGenerator(function* () {\n        return _this2.internalStorageService.readBlob(id);\n      }), \"storage_readBlob\");\n    })();\n  }\n\n  getVersions(versionId, count, scenarioName) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      return _this3.runWithRetry( /*#__PURE__*/_asyncToGenerator(function* () {\n        return _this3.internalStorageService.getVersions(versionId, count, scenarioName);\n      }), \"storage_getVersions\");\n    })();\n  }\n\n  uploadSummaryWithContext(summary, context) {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      // Not using retry loop here. Couple reasons:\n      // 1. If client lost connectivity, then retry loop will result in uploading stale summary\n      //    by stale summarizer after connectivity comes back. It will cause failures for this client and for\n      //    real (new) summarizer. This problem in particular should be solved in future by supplying abort handle\n      //    on all APIs and caller (ContainerRuntime.submitSummary) aborting call on loss of connectivity\n      // 2. Similar, if we get 429 with retryAfter = 10 minutes, it's likely not the right call to retry summary\n      //    upload in 10 minutes - it's better to keep processing ops and retry later. Though caller needs to take\n      //    retryAfter into account!\n      // But retry loop is required for creation flow (Container.attach)\n      assert(context.referenceSequenceNumber === 0 === (context.ackHandle === undefined), 0x251\n      /* \"creation summary has to have seq=0 && handle === undefined\" */\n      );\n\n      if (context.referenceSequenceNumber !== 0) {\n        return _this4.internalStorageService.uploadSummaryWithContext(summary, context);\n      } // Creation flow with attachment blobs - need to do retries!\n\n\n      return _this4.runWithRetry( /*#__PURE__*/_asyncToGenerator(function* () {\n        return _this4.internalStorageService.uploadSummaryWithContext(summary, context);\n      }), \"storage_uploadSummaryWithContext\");\n    })();\n  }\n\n  downloadSummary(handle) {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      return _this5.runWithRetry( /*#__PURE__*/_asyncToGenerator(function* () {\n        return _this5.internalStorageService.downloadSummary(handle);\n      }), \"storage_downloadSummary\");\n    })();\n  }\n\n  createBlob(file) {\n    var _this6 = this;\n\n    return _asyncToGenerator(function* () {\n      return _this6.runWithRetry( /*#__PURE__*/_asyncToGenerator(function* () {\n        return _this6.internalStorageService.createBlob(file);\n      }), \"storage_createBlob\");\n    })();\n  }\n\n  checkStorageDisposed() {\n    if (this._disposed) {\n      // pre-0.58 error message: storageServiceDisposedCannotRetry\n      throw new GenericError(\"Storage Service is disposed. Cannot retry\", {\n        canRetry: false\n      });\n    }\n\n    return undefined;\n  }\n\n  runWithRetry(api, callName) {\n    var _this7 = this;\n\n    return _asyncToGenerator(function* () {\n      return runWithRetry(api, callName, _this7.logger, {\n        onRetry: () => _this7.checkStorageDisposed()\n      });\n    })();\n  }\n\n} //# sourceMappingURL=retriableDocumentStorageService.js.map","map":null,"metadata":{},"sourceType":"module"}
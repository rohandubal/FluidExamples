{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Users\\\\sdeshpande\\\\Documents\\\\FluidExamples\\\\angular-demo\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport { SharedMap } from \"fluid-framework\";\nimport { TinyliciousClient } from \"@fluidframework/tinylicious-client\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\n\nfunction AppComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r2 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 1)(1, \"button\", 2);\n    i0.ɵɵlistener(\"click\", function AppComponent_div_0_Template_button_click_1_listener() {\n      i0.ɵɵrestoreView(_r2);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return ctx_r1.onButtonClick();\n    });\n    i0.ɵɵtext(2, \"Get Time\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"span\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(ctx_r0.localTimestamp.time);\n  }\n}\n\nexport let AppComponent = /*#__PURE__*/(() => {\n  class AppComponent {\n    ngOnInit() {\n      var _this = this;\n\n      return _asyncToGenerator(function* () {\n        _this.sharedTimestamp = yield _this.getFluidData();\n\n        _this.syncData();\n      })();\n    }\n\n    getFluidData() {\n      return _asyncToGenerator(function* () {\n        // TODO 1: Configure the container.\n        const client = new TinyliciousClient();\n        const containerSchema = {\n          initialObjects: {\n            sharedTimestamp: SharedMap\n          }\n        }; // TODO 2: Get the container from the Fluid service.\n\n        let container;\n        const containerId = location.hash.substring(1);\n\n        if (!containerId) {\n          ({\n            container\n          } = yield client.createContainer(containerSchema));\n          const id = yield container.attach();\n          location.hash = id;\n        } else {\n          ({\n            container\n          } = yield client.getContainer(containerId, containerSchema));\n        } // TODO 3: Return the Fluid timestamp object.\n\n\n        return container.initialObjects.sharedTimestamp;\n      })();\n    }\n\n    syncData() {\n      // Only sync if the Fluid SharedMap object is defined.\n      if (this.sharedTimestamp) {\n        // TODO 4: Set the value of the localTimestamp state object that will appear in the UI.\n        this.updateLocalTimestamp = () => {\n          this.localTimestamp = {\n            time: this.sharedTimestamp.get(\"time\")\n          };\n        };\n\n        this.updateLocalTimestamp(); // TODO 5: Register handlers.\n\n        this.sharedTimestamp.on(\"valueChanged\", this.updateLocalTimestamp);\n      }\n    }\n\n    onButtonClick() {\n      var _a;\n\n      (_a = this.sharedTimestamp) === null || _a === void 0 ? void 0 : _a.set(\"time\", Date.now().toString());\n    }\n\n    ngOnDestroy() {\n      // Delete handler registration when the Angular App component is dismounted.\n      this.sharedTimestamp.off(\"valueChanged\", this.updateLocalTimestamp);\n    }\n\n  }\n\n  AppComponent.ɵfac = function AppComponent_Factory(t) {\n    return new (t || AppComponent)();\n  };\n\n  AppComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AppComponent,\n    selectors: [[\"app-root\"]],\n    decls: 1,\n    vars: 1,\n    consts: [[\"class\", \"app\", 4, \"ngIf\"], [1, \"app\"], [3, \"click\"]],\n    template: function AppComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, AppComponent_div_0_Template, 5, 1, \"div\", 0);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.localTimestamp);\n      }\n    },\n    directives: [i1.NgIf],\n    styles: [\".app[_ngcontent-%COMP%]{text-align:center}\"]\n  });\n  return AppComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}
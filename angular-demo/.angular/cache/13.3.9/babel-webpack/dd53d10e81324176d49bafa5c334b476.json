{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Users\\\\sdeshpande\\\\Documents\\\\FluidExamples\\\\angular-demo\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\n\n/*!\n * Copyright (c) Microsoft Corporation and contributors. All rights reserved.\n * Licensed under the MIT License.\n */\nimport { fromUtf8ToBase64 } from \"@fluidframework/common-utils\";\nimport { BasicRestWrapper } from \"./restWrapper\";\n\nfunction endsWith(value, endings) {\n  for (const ending of endings) {\n    if (value.endsWith(ending)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nexport const getAuthorizationTokenFromCredentials = credentials => `Basic ${fromUtf8ToBase64(`${credentials.user}:${credentials.password}`)}`;\n/**\n * Implementation of the IHistorian interface that calls out to a REST interface\n */\n\nexport class Historian {\n  constructor(endpoint, historianApi, disableCache, restWrapper) {\n    this.endpoint = endpoint;\n    this.historianApi = historianApi;\n    this.restWrapper = restWrapper;\n    this.defaultQueryString = {};\n\n    if (disableCache && this.historianApi) {\n      this.defaultQueryString.disableCache = disableCache;\n      this.cacheBust = false;\n    } else {\n      this.cacheBust = disableCache;\n    }\n\n    if (this.restWrapper === undefined) {\n      this.restWrapper = new BasicRestWrapper(this.endpoint);\n    }\n  }\n\n  getHeader(sha) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this.historianApi) {\n        return _this.restWrapper.get(`/headers/${encodeURIComponent(sha)}`, _this.getQueryString());\n      } else {\n        return _this.getHeaderDirect(sha);\n      }\n    })();\n  }\n\n  getFullTree(sha) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      return _this2.restWrapper.get(`/tree/${encodeURIComponent(sha)}`, _this2.getQueryString());\n    })();\n  }\n\n  getBlob(sha) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      return _this3.restWrapper.get(`/git/blobs/${encodeURIComponent(sha)}`, _this3.getQueryString());\n    })();\n  }\n\n  createBlob(blob) {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      return _this4.restWrapper.post(`/git/blobs`, blob, _this4.getQueryString());\n    })();\n  }\n\n  getContent(path, ref) {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      return _this5.restWrapper.get(`/contents/${path}`, _this5.getQueryString({\n        ref\n      }));\n    })();\n  }\n\n  getCommits(sha, count) {\n    var _this6 = this;\n\n    return _asyncToGenerator(function* () {\n      return _this6.restWrapper.get(`/commits`, _this6.getQueryString({\n        count,\n        sha\n      })).catch(error => error === 400 || error === 404 ? [] : Promise.reject(error));\n    })();\n  }\n\n  getCommit(sha) {\n    var _this7 = this;\n\n    return _asyncToGenerator(function* () {\n      return _this7.restWrapper.get(`/git/commits/${encodeURIComponent(sha)}`, _this7.getQueryString());\n    })();\n  }\n\n  createCommit(commit) {\n    var _this8 = this;\n\n    return _asyncToGenerator(function* () {\n      return _this8.restWrapper.post(`/git/commits`, commit, _this8.getQueryString());\n    })();\n  }\n\n  getRefs() {\n    var _this9 = this;\n\n    return _asyncToGenerator(function* () {\n      return _this9.restWrapper.get(`/git/refs`, _this9.getQueryString());\n    })();\n  }\n\n  getRef(ref) {\n    var _this10 = this;\n\n    return _asyncToGenerator(function* () {\n      return _this10.restWrapper.get(`/git/refs/${ref}`, _this10.getQueryString());\n    })();\n  }\n\n  createRef(params) {\n    var _this11 = this;\n\n    return _asyncToGenerator(function* () {\n      return _this11.restWrapper.post(`/git/refs`, params, _this11.getQueryString());\n    })();\n  }\n\n  updateRef(ref, params) {\n    var _this12 = this;\n\n    return _asyncToGenerator(function* () {\n      return _this12.restWrapper.patch(`/git/refs/${ref}`, params, _this12.getQueryString());\n    })();\n  }\n\n  deleteRef(ref) {\n    var _this13 = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this13.restWrapper.delete(`/git/refs/${ref}`, _this13.getQueryString());\n    })();\n  }\n\n  createTag(tag) {\n    var _this14 = this;\n\n    return _asyncToGenerator(function* () {\n      return _this14.restWrapper.post(`/git/tags`, tag, _this14.getQueryString());\n    })();\n  }\n\n  getTag(tag) {\n    var _this15 = this;\n\n    return _asyncToGenerator(function* () {\n      return _this15.restWrapper.get(`/git/tags/${tag}`, _this15.getQueryString());\n    })();\n  }\n\n  createTree(tree) {\n    var _this16 = this;\n\n    return _asyncToGenerator(function* () {\n      return _this16.restWrapper.post(`/git/trees`, tree, _this16.getQueryString());\n    })();\n  }\n\n  getTree(sha, recursive) {\n    var _this17 = this;\n\n    return _asyncToGenerator(function* () {\n      return _this17.restWrapper.get(`/git/trees/${encodeURIComponent(sha)}`, _this17.getQueryString({\n        recursive: recursive ? 1 : 0\n      }));\n    })();\n  }\n\n  createSummary(summary) {\n    var _this18 = this;\n\n    return _asyncToGenerator(function* () {\n      return _this18.restWrapper.post(`/git/summaries`, summary, _this18.getQueryString());\n    })();\n  }\n\n  deleteSummary(softDelete) {\n    var _this19 = this;\n\n    return _asyncToGenerator(function* () {\n      const headers = {\n        \"Soft-Delete\": softDelete\n      };\n      return _this19.restWrapper.delete(`/git/summaries`, _this19.getQueryString(), headers);\n    })();\n  }\n\n  getSummary(sha) {\n    var _this20 = this;\n\n    return _asyncToGenerator(function* () {\n      return _this20.restWrapper.get(`/git/summaries/${sha}`, _this20.getQueryString());\n    })();\n  }\n\n  getHeaderDirect(sha) {\n    var _this21 = this;\n\n    return _asyncToGenerator(function* () {\n      const tree = yield _this21.getTree(sha, true);\n      const includeBlobs = [\".attributes\", \".blobs\", \".messages\", \"header\"];\n      const blobsP = [];\n\n      for (const entry of tree.tree) {\n        if (entry.type === \"blob\" && endsWith(entry.path, includeBlobs)) {\n          const blobP = _this21.getBlob(entry.sha);\n\n          blobsP.push(blobP);\n        }\n      }\n\n      const blobs = yield Promise.all(blobsP);\n      return {\n        blobs,\n        tree\n      };\n    })();\n  }\n\n  getQueryString(queryString) {\n    if (this.cacheBust) {\n      return Object.assign(Object.assign({\n        cacheBust: Date.now()\n      }, this.defaultQueryString), queryString);\n    }\n\n    return Object.assign(Object.assign({}, this.defaultQueryString), queryString);\n  }\n\n} //# sourceMappingURL=historian.js.map","map":null,"metadata":{},"sourceType":"module"}
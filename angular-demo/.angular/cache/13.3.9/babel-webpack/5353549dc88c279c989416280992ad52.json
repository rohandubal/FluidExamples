{"ast":null,"code":"/*!\n * Copyright (c) Microsoft Corporation and contributors. All rights reserved.\n * Licensed under the MIT License.\n */\n\n/**\n  * Helper class for lazy initialized values. Ensures the value is only generated once, and remain immutable\n  */\nexport class Lazy {\n  /**\n   * Instantiates an instance of Lazy<T>\n   * @param valueGenerator - the function that will generate the value when value is accessed the first time\n   */\n  constructor(valueGenerator) {\n    this.valueGenerator = valueGenerator;\n    this._evaluated = false;\n  }\n  /**\n   * Return true if the value as been generated, otherwise false\n   */\n\n\n  get evaluated() {\n    return this._evaluated;\n  }\n  /**\n   * Get the value. If this is the first call the value will be generated\n   */\n\n\n  get value() {\n    if (!this._evaluated) {\n      this._evaluated = true;\n      this._value = this.valueGenerator();\n    }\n\n    return this._value;\n  }\n\n} //# sourceMappingURL=lazy.js.map","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"/*!\n * Copyright (c) Microsoft Corporation and contributors. All rights reserved.\n * Licensed under the MIT License.\n */\nimport { assert, performance } from \"@fluidframework/common-utils\";\nimport { ChildLogger } from \"@fluidframework/telemetry-utils\";\nexport class BatchTracker {\n  constructor(batchEventEmitter, logger, batchLengthThreshold, batchCountSamplingRate, dateTimeProvider = () => performance.now()) {\n    this.batchEventEmitter = batchEventEmitter;\n    this.trackedBatchCount = 0;\n    this.logger = ChildLogger.create(logger, \"Batching\");\n    this.batchEventEmitter.on(\"batchBegin\", message => {\n      this.startBatchSequenceNumber = message.sequenceNumber;\n      this.batchProcessingStartTimeStamp = dateTimeProvider();\n      this.trackedBatchCount++;\n    });\n    this.batchEventEmitter.on(\"batchEnd\", (error, message) => {\n      assert(this.startBatchSequenceNumber !== undefined && this.batchProcessingStartTimeStamp !== undefined, 0x2ba\n      /* \"batchBegin must fire before batchEnd\" */\n      );\n      const length = message.sequenceNumber - this.startBatchSequenceNumber + 1;\n\n      if (length >= batchLengthThreshold) {\n        this.logger.sendErrorEvent({\n          eventName: \"LengthTooBig\",\n          length,\n          threshold: batchLengthThreshold,\n          batchEndSequenceNumber: message.sequenceNumber,\n          duration: dateTimeProvider() - this.batchProcessingStartTimeStamp,\n          batchError: error !== undefined\n        });\n      }\n\n      if (this.trackedBatchCount % batchCountSamplingRate === 0) {\n        this.logger.sendPerformanceEvent({\n          eventName: \"Length\",\n          length,\n          samplingRate: batchCountSamplingRate,\n          batchEndSequenceNumber: message.sequenceNumber,\n          duration: dateTimeProvider() - this.batchProcessingStartTimeStamp\n        });\n      }\n\n      this.startBatchSequenceNumber = undefined;\n      this.batchProcessingStartTimeStamp = undefined;\n    });\n  }\n\n}\n/**\n * Track batch sizes in terms of op counts and processing times\n *\n * @param batchEventEmitter - event emitter which tracks the lifecycle of batch operations\n * @param logger - logger\n * @param batchLengthThreshold - threshold for the length of a batch when to send an error event\n * @param batchCountSamplingRate - rate for batches for which to send an event with its characteristics\n * @returns\n */\n\nexport const BindBatchTracker = (batchEventEmitter, logger, batchLengthThreshold = 1000, batchCountSamplingRate = 1000) => new BatchTracker(batchEventEmitter, logger, batchLengthThreshold, batchCountSamplingRate); //# sourceMappingURL=batchTracker.js.map","map":null,"metadata":{},"sourceType":"module"}
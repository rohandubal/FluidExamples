{"ast":null,"code":"/*!\n * Copyright (c) Microsoft Corporation and contributors. All rights reserved.\n * Licensed under the MIT License.\n */\nimport { KJUR as jsrsasign } from \"jsrsasign\";\nimport jwtDecode from \"jwt-decode\";\nimport { v4 as uuid } from \"uuid\";\nimport { NetworkError } from \"./error\";\n/**\n * Validates a JWT token to authorize routerlicious.\n * Throws NetworkError if claims are invalid.\n * @returns - decoded claims.\n */\n\nexport function validateTokenClaims(token, documentId, tenantId) {\n  if (typeof token !== \"string\") {\n    throw new NetworkError(403, `Token must be a string. Received: ${typeof token}`);\n  }\n\n  const claims = jwtDecode(token);\n\n  if (!claims || claims.documentId !== documentId || claims.tenantId !== tenantId) {\n    throw new NetworkError(403, \"DocumentId and/or TenantId in token claims do not match requested resource\");\n  }\n\n  if (claims.scopes === undefined || claims.scopes.length === 0) {\n    throw new NetworkError(403, \"Missing scopes in token claims\");\n  }\n\n  return claims;\n}\n/**\n * Validates token claims' iat and exp properties to ensure valid token expiration.\n * Throws NetworkError if expiry is invalid.\n * @returns token lifetime in milliseconds.\n */\n\nexport function validateTokenClaimsExpiration(claims, maxTokenLifetimeSec) {\n  if (!claims.exp || !claims.iat || claims.exp - claims.iat > maxTokenLifetimeSec) {\n    throw new NetworkError(403, \"Invalid token expiry\");\n  }\n\n  const lifeTimeMSec = claims.exp * 1000 - new Date().getTime();\n\n  if (lifeTimeMSec < 0) {\n    throw new NetworkError(401, \"Expired token\");\n  }\n\n  return lifeTimeMSec;\n}\n/**\n * Generates a JWT token to authorize routerlicious. This function uses a browser friendly auth library (jsrsasign)\n * and should only be used in client context.\n */\n// TODO: We should use this library in all client code rather than using jsrsasign directly.\n\nexport function generateToken(tenantId, documentId, key, scopes, user, lifetime = 60 * 60, ver = \"1.0\") {\n  let userClaim = user ? user : generateUser();\n\n  if (userClaim.id === \"\" || userClaim.id === undefined) {\n    userClaim = generateUser();\n  } // Current time in seconds\n\n\n  const now = Math.round(new Date().getTime() / 1000);\n  const claims = {\n    documentId,\n    scopes,\n    tenantId,\n    user: userClaim,\n    iat: now,\n    exp: now + lifetime,\n    ver,\n    jti: uuid()\n  };\n  const utf8Key = {\n    utf8: key\n  };\n  return jsrsasign.jws.JWS.sign(null, JSON.stringify({\n    alg: \"HS256\",\n    typ: \"JWT\"\n  }), claims, utf8Key);\n}\nexport function generateUser() {\n  const randomUser = {\n    id: uuid(),\n    name: uuid()\n  };\n  return randomUser;\n} //# sourceMappingURL=auth.js.map","map":null,"metadata":{},"sourceType":"module"}
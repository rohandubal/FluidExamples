{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Users\\\\sdeshpande\\\\Documents\\\\FluidExamples\\\\angular-demo\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\n\n/*!\n * Copyright (c) Microsoft Corporation and contributors. All rights reserved.\n * Licensed under the MIT License.\n */\nimport { getNormalizedObjectStoragePathParts } from \"@fluidframework/runtime-utils\";\nexport class ChannelStorageService {\n  constructor(tree, storage, logger, extraBlobs) {\n    this.tree = tree;\n    this.storage = storage;\n    this.logger = logger;\n    this.extraBlobs = extraBlobs;\n    this.flattenedTree = {}; // Create a map from paths to blobs\n\n    if (tree !== undefined) {\n      ChannelStorageService.flattenTree(\"\", tree, this.flattenedTree);\n    }\n  }\n\n  static flattenTree(base, tree, results) {\n    // eslint-disable-next-line guard-for-in, no-restricted-syntax\n    for (const path in tree.trees) {\n      ChannelStorageService.flattenTree(`${base}${path}/`, tree.trees[path], results);\n    } // eslint-disable-next-line guard-for-in, no-restricted-syntax\n\n\n    for (const blob in tree.blobs) {\n      results[`${base}${blob}`] = tree.blobs[blob];\n    }\n  }\n\n  contains(path) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      return _this.flattenedTree[path] !== undefined;\n    })();\n  }\n\n  readBlob(path) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      const id = yield _this2.getIdForPath(path);\n      const blob = _this2.extraBlobs !== undefined ? _this2.extraBlobs.get(id) : undefined;\n\n      if (blob !== undefined) {\n        return blob;\n      }\n\n      const blobP = _this2.storage.readBlob(id);\n\n      blobP.catch(error => _this2.logger.sendErrorEvent({\n        eventName: \"ChannelStorageBlobError\"\n      }, error));\n      return blobP;\n    })();\n  }\n\n  list(path) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      var _a;\n\n      let tree = _this3.tree;\n      const pathParts = getNormalizedObjectStoragePathParts(path);\n\n      while (tree !== undefined && pathParts.length > 0) {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const part = pathParts.shift();\n        tree = tree.trees[part];\n      }\n\n      if (tree === undefined || pathParts.length !== 0) {\n        throw new Error(\"path does not exist\");\n      }\n\n      return Object.keys((_a = tree === null || tree === void 0 ? void 0 : tree.blobs) !== null && _a !== void 0 ? _a : {});\n    })();\n  }\n\n  getIdForPath(path) {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      return _this4.flattenedTree[path];\n    })();\n  }\n\n} //# sourceMappingURL=channelStorageService.js.map","map":null,"metadata":{},"sourceType":"module"}
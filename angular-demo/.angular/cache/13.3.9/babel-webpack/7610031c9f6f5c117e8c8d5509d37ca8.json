{"ast":null,"code":"/*!\n * Copyright (c) Microsoft Corporation and contributors. All rights reserved.\n * Licensed under the MIT License.\n */\nimport { Uint8ArrayToString, unreachableCase } from \"@fluidframework/common-utils\";\nimport { AttachmentTreeEntry, BlobTreeEntry, TreeTreeEntry } from \"@fluidframework/protocol-base\";\nimport { SummaryType } from \"@fluidframework/protocol-definitions\";\n/**\n * Converts ISummaryTree to ITree format.\n * @param summaryTree - summary tree in ISummaryTree format\n */\n\nexport function convertSummaryTreeToSnapshotITree(summaryTree) {\n  const entries = [];\n  const protocolSummary = summaryTree.tree[\".protocol\"];\n  const appSummary = summaryTree.tree[\".app\"]; // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions\n\n  const adaptSumaryTree = protocolSummary && appSummary; // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions\n\n  const allSummaryEntries = adaptSumaryTree ? [...Object.entries(protocolSummary.tree), ...Object.entries(appSummary.tree)] : Object.entries(summaryTree.tree);\n\n  for (const [key, value] of allSummaryEntries) {\n    // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions\n    const k = adaptSumaryTree && [\"attributes\"].includes(key) ? `.${key}` : key;\n\n    switch (value.type) {\n      case SummaryType.Blob:\n        {\n          let parsedContent;\n          let encoding = \"utf-8\";\n\n          if (typeof value.content === \"string\") {\n            parsedContent = value.content;\n          } else {\n            parsedContent = Uint8ArrayToString(value.content, \"base64\");\n            encoding = \"base64\";\n          }\n\n          entries.push(new BlobTreeEntry(k, parsedContent, encoding));\n          break;\n        }\n\n      case SummaryType.Tree:\n        {\n          entries.push(new TreeTreeEntry(k, convertSummaryTreeToSnapshotITree(value)));\n          break;\n        }\n\n      case SummaryType.Attachment:\n        {\n          entries.push(new AttachmentTreeEntry(k, value.id));\n          break;\n        }\n\n      case SummaryType.Handle:\n        {\n          throw new Error(\"Should not have Handle type in summary tree\");\n        }\n\n      default:\n        unreachableCase(value, \"Unexpected summary tree type\");\n    }\n  }\n\n  return {\n    entries,\n    unreferenced: summaryTree.unreferenced\n  };\n} //# sourceMappingURL=treeConversions.js.map","map":null,"metadata":{},"sourceType":"module"}
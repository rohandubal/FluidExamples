{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Users\\\\sdeshpande\\\\Documents\\\\FluidExamples\\\\angular-demo\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\n\n/*!\n * Copyright (c) Microsoft Corporation and contributors. All rights reserved.\n * Licensed under the MIT License.\n */\nimport * as querystring from \"querystring\";\nimport safeStringify from \"json-stringify-safe\";\nimport Axios from \"axios\";\nimport { v4 as uuid } from \"uuid\";\nimport { debug } from \"./debug\";\nimport { createFluidServiceNetworkError } from \"./error\";\nimport { CorrelationIdHeaderName } from \"./constants\";\nexport class RestWrapper {\n  constructor(baseurl, defaultQueryString = {}, maxBodyLength = 1000 * 1024 * 1024, maxContentLength = 1000 * 1024 * 1024) {\n    this.baseurl = baseurl;\n    this.defaultQueryString = defaultQueryString;\n    this.maxBodyLength = maxBodyLength;\n    this.maxContentLength = maxContentLength;\n  }\n\n  get(url, queryString, headers) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const options = {\n        baseURL: _this.baseurl,\n        headers,\n        maxBodyLength: _this.maxBodyLength,\n        maxContentLength: _this.maxContentLength,\n        method: \"GET\",\n        url: `${url}${_this.generateQueryString(queryString)}`\n      };\n      return _this.request(options, 200);\n    })();\n  }\n\n  post(url, requestBody, queryString, headers) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      const options = {\n        baseURL: _this2.baseurl,\n        data: requestBody,\n        headers,\n        maxBodyLength: _this2.maxBodyLength,\n        maxContentLength: _this2.maxContentLength,\n        method: \"POST\",\n        url: `${url}${_this2.generateQueryString(queryString)}`\n      };\n      return _this2.request(options, 201);\n    })();\n  }\n\n  delete(url, queryString, headers) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      const options = {\n        baseURL: _this3.baseurl,\n        headers,\n        maxBodyLength: _this3.maxBodyLength,\n        maxContentLength: _this3.maxContentLength,\n        method: \"DELETE\",\n        url: `${url}${_this3.generateQueryString(queryString)}`\n      };\n      return _this3.request(options, 204);\n    })();\n  }\n\n  patch(url, requestBody, queryString, headers) {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      const options = {\n        baseURL: _this4.baseurl,\n        data: requestBody,\n        headers,\n        maxBodyLength: _this4.maxBodyLength,\n        maxContentLength: _this4.maxContentLength,\n        method: \"PATCH\",\n        url: `${url}${_this4.generateQueryString(queryString)}`\n      };\n      return _this4.request(options, 200);\n    })();\n  }\n\n  generateQueryString(queryStringValues) {\n    if (this.defaultQueryString || queryStringValues) {\n      const queryStringMap = Object.assign(Object.assign({}, this.defaultQueryString), queryStringValues);\n      const queryString = querystring.stringify(queryStringMap);\n\n      if (queryString !== \"\") {\n        return `?${queryString}`;\n      }\n    }\n\n    return \"\";\n  }\n\n}\nexport class BasicRestWrapper extends RestWrapper {\n  constructor(baseurl, defaultQueryString = {}, maxBodyLength = 1000 * 1024 * 1024, maxContentLength = 1000 * 1024 * 1024, defaultHeaders = {}, axios = Axios, refreshDefaultQueryString, refreshDefaultHeaders, getCorrelationId) {\n    super(baseurl, defaultQueryString, maxBodyLength, maxContentLength);\n    this.defaultHeaders = defaultHeaders;\n    this.axios = axios;\n    this.refreshDefaultQueryString = refreshDefaultQueryString;\n    this.refreshDefaultHeaders = refreshDefaultHeaders;\n    this.getCorrelationId = getCorrelationId;\n  }\n\n  request(requestConfig, statusCode, canRetry = true) {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      var _a, _b;\n\n      const options = Object.assign({}, requestConfig);\n      options.headers = _this5.generateHeaders(options.headers, (_b = (_a = _this5.getCorrelationId) === null || _a === void 0 ? void 0 : _a.call(_this5)) !== null && _b !== void 0 ? _b : uuid());\n      return new Promise((resolve, reject) => {\n        _this5.axios.request(options).then(response => {\n          resolve(response.data);\n        }).catch(error => {\n          var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p;\n\n          if (((_a = error === null || error === void 0 ? void 0 : error.response) === null || _a === void 0 ? void 0 : _a.status) === statusCode) {\n            // Axios misinterpreted as error, return as successful response\n            resolve((_b = error === null || error === void 0 ? void 0 : error.response) === null || _b === void 0 ? void 0 : _b.data);\n          }\n\n          if (error === null || error === void 0 ? void 0 : error.config) {\n            // eslint-disable-next-line max-len\n            debug(`[${error.config.method}] request to [${(_c = error.config.baseURL) !== null && _c !== void 0 ? _c : \"\"}${(_d = error.config.url) !== null && _d !== void 0 ? _d : \"\"}] failed with [${(_e = error.response) === null || _e === void 0 ? void 0 : _e.status}] [${safeStringify((_f = error.response) === null || _f === void 0 ? void 0 : _f.data, undefined, 2)}]`);\n          } else {\n            debug(`request to ${options.url} failed ${error ? error.message : \"\"}`);\n          }\n\n          if (((_g = error === null || error === void 0 ? void 0 : error.response) === null || _g === void 0 ? void 0 : _g.status) === 429 && ((_j = (_h = error === null || error === void 0 ? void 0 : error.response) === null || _h === void 0 ? void 0 : _h.data) === null || _j === void 0 ? void 0 : _j.retryAfter) > 0 && canRetry) {\n            setTimeout(() => {\n              _this5.request(options, statusCode).then(resolve).catch(reject);\n            }, error.response.data.retryAfter * 1000);\n          } else if (((_k = error === null || error === void 0 ? void 0 : error.response) === null || _k === void 0 ? void 0 : _k.status) === 401 && canRetry && _this5.refreshOnAuthError()) {\n            const retryConfig = Object.assign({}, requestConfig);\n            retryConfig.headers = _this5.generateHeaders(retryConfig.headers, options.headers[CorrelationIdHeaderName]);\n\n            _this5.request(retryConfig, statusCode, false).then(resolve).catch(reject);\n          } else {\n            // From https://axios-http.com/docs/handling_errors\n            if (error === null || error === void 0 ? void 0 : error.response) {\n              // The request was made and the server responded with a status code\n              // that falls out of the range of 2xx\n              reject(createFluidServiceNetworkError((_l = error === null || error === void 0 ? void 0 : error.response) === null || _l === void 0 ? void 0 : _l.status, (_m = error === null || error === void 0 ? void 0 : error.response) === null || _m === void 0 ? void 0 : _m.data));\n            } else if (error === null || error === void 0 ? void 0 : error.request) {\n              // The request was made but no response was received. That can happen if a service is\n              // temporarily down or inaccessible due to network failures. We leverage that in here\n              // to detect network failures and transform them into a NetworkError with code 502,\n              // which can be retried and is not fatal.\n              reject(createFluidServiceNetworkError(502, `Network Error: ${(_o = error === null || error === void 0 ? void 0 : error.message) !== null && _o !== void 0 ? _o : \"undefined\"}`));\n            } else {\n              // Something happened in setting up the request that triggered an Error\n              const details = {\n                canRetry: false,\n                isFatal: false,\n                message: (_p = error === null || error === void 0 ? void 0 : error.message) !== null && _p !== void 0 ? _p : \"Unknown Error\"\n              };\n              reject(createFluidServiceNetworkError(500, details));\n            }\n          }\n        });\n      });\n    })();\n  }\n\n  generateHeaders(headers, fallbackCorrelationId) {\n    let result = headers !== null && headers !== void 0 ? headers : {};\n\n    if (this.defaultHeaders) {\n      result = Object.assign(Object.assign({}, this.defaultHeaders), headers);\n    }\n\n    if (result[CorrelationIdHeaderName]) {\n      return result;\n    }\n\n    return Object.assign({\n      [CorrelationIdHeaderName]: fallbackCorrelationId\n    }, result);\n  }\n\n  refreshOnAuthError() {\n    if (this.refreshDefaultQueryString === undefined && this.refreshDefaultHeaders === undefined) {\n      // retry will not succeed with the same params and headers\n      return false;\n    }\n\n    if (this.refreshDefaultHeaders !== undefined) {\n      this.defaultHeaders = this.refreshDefaultHeaders();\n    }\n\n    if (this.refreshDefaultQueryString !== undefined) {\n      this.defaultQueryString = this.refreshDefaultQueryString();\n    }\n\n    return true;\n  }\n\n} //# sourceMappingURL=restWrapper.js.map","map":null,"metadata":{},"sourceType":"module"}
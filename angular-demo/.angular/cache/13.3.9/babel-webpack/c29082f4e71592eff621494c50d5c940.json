{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Users\\\\sdeshpande\\\\Documents\\\\FluidExamples\\\\angular-demo\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\n\n/*!\n * Copyright (c) Microsoft Corporation and contributors. All rights reserved.\n * Licensed under the MIT License.\n */\n\n/**\n * A deferred creates a promise and the ability to resolve or reject it\n */\nexport class Deferred {\n  constructor() {\n    this.completed = false;\n    this.p = new Promise((resolve, reject) => {\n      this.res = resolve;\n      this.rej = reject;\n    });\n  }\n  /**\n   * Returns whether the underlying promise has been completed\n   */\n\n\n  get isCompleted() {\n    return this.completed;\n  }\n  /**\n   * Retrieves the underlying promise for the deferred\n   *\n   * @returns the underlying promise\n   */\n\n\n  get promise() {\n    return this.p;\n  }\n  /**\n   * Resolves the promise\n   *\n   * @param value - the value to resolve the promise with\n   */\n\n\n  resolve(value) {\n    if (this.res !== undefined) {\n      this.completed = true;\n      this.res(value);\n    }\n  }\n  /**\n   * Rejects the promise\n   *\n   * @param value - the value to reject the promise with\n   */\n\n\n  reject(error) {\n    if (this.rej !== undefined) {\n      this.completed = true;\n      this.rej(error);\n    }\n  }\n\n}\n/**\n * A lazy evaluated promise. The execute function is delayed until\n * the promise is used, e.g. await, then, catch ...\n * The execute function is only called once.\n * All calls are then proxied to the promise returned by the execute method.\n */\n\nexport class LazyPromise {\n  constructor(execute) {\n    this.execute = execute;\n  }\n\n  get [Symbol.toStringTag]() {\n    return this.getPromise()[Symbol.toStringTag];\n  }\n\n  then(onfulfilled, onrejected) {\n    var _arguments = arguments,\n        _this = this;\n\n    return _asyncToGenerator(function* () {\n      return _this.getPromise().then(..._arguments);\n    })();\n  }\n\n  catch(onrejected) {\n    var _arguments2 = arguments,\n        _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      return _this2.getPromise().catch(..._arguments2);\n    })();\n  }\n\n  finally(onfinally) {\n    var _arguments3 = arguments,\n        _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      return _this3.getPromise().finally(..._arguments3);\n    })();\n  }\n\n  getPromise() {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this4.result === undefined) {\n        _this4.result = _this4.execute();\n      }\n\n      return _this4.result;\n    })();\n  }\n\n} //# sourceMappingURL=promises.js.map","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"/*!\n * Copyright (c) Microsoft Corporation and contributors. All rights reserved.\n * Licensed under the MIT License.\n */\n\n/**\n * Enum-like constant defining the types of \"maintenance\" events on a merge tree.\n * Maintenance events correspond to structural segment changes or acks of pending segments.\n *\n * Note: these values are assigned negative integers to avoid clashing with `MergeTreeDeltaType`.\n */\nexport const MergeTreeMaintenanceType = {\n  /**\n   * Notification that a segment \"append\" has occurred, i.e. two adjacent segments have been merged.\n   * BEWARE: `deltaSegments` on the corresponding event will contain both the merged segment and the latter\n   * segment, pre-merge.\n   * For example, if the merge tree originally had two adjacent segments [A][B] and called A.append(B) to get\n   * segment [AB], `deltaSegments` would contain [AB] and [B].\n   */\n  APPEND: -1,\n\n  /**\n   * Notification that a segment has been split in two.\n   * `deltaSegments` on the corresponding event will contain the resulting two segments.\n   */\n  SPLIT: -2,\n\n  /**\n   * Notification that a segment has been unlinked (i.e. removed) from the MergeTree.\n   * This occurs on leaf segments during Zamboni when the segment's tracking collection is empty\n   * (e.g., not being tracked for undo/redo).\n   * It also occurs on internal merge tree segments when re-packing children to maintain tree balancing invariants.\n   */\n  UNLINK: -3,\n\n  /**\n   * Notification that a local change has been acknowledged by the server.\n   * This means that it has made the round trip to the server and has had a sequence number assigned.\n   */\n  ACKNOWLEDGED: -4\n}; //# sourceMappingURL=mergeTreeDeltaCallback.js.map","map":null,"metadata":{},"sourceType":"module"}
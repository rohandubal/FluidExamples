{"ast":null,"code":"/*!\n * Copyright (c) Microsoft Corporation and contributors. All rights reserved.\n * Licensed under the MIT License.\n */\nimport { ReferenceType } from \"./ops\";\nexport const reservedTileLabelsKey = \"referenceTileLabels\";\nexport const reservedRangeLabelsKey = \"referenceRangeLabels\";\nexport function refTypeIncludesFlag(refPosOrType, flags) {\n  const refType = typeof refPosOrType === \"number\" ? refPosOrType : refPosOrType.refType; // eslint-disable-next-line no-bitwise\n\n  return (refType & flags) !== 0;\n}\nexport const refGetTileLabels = refPos => refTypeIncludesFlag(refPos, ReferenceType.Tile) && refPos.properties ? refPos.properties[reservedTileLabelsKey] : undefined;\nexport const refGetRangeLabels = refPos => // eslint-disable-next-line no-bitwise\nrefTypeIncludesFlag(refPos, ReferenceType.NestBegin | ReferenceType.NestEnd) && refPos.properties ? refPos.properties[reservedRangeLabelsKey] : undefined;\nexport function refHasTileLabel(refPos, label) {\n  const tileLabels = refGetTileLabels(refPos);\n\n  if (tileLabels) {\n    for (const refLabel of tileLabels) {\n      if (label === refLabel) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\nexport function refHasRangeLabel(refPos, label) {\n  const rangeLabels = refGetRangeLabels(refPos);\n\n  if (rangeLabels) {\n    for (const refLabel of rangeLabels) {\n      if (label === refLabel) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\nexport function refHasTileLabels(refPos) {\n  return refGetTileLabels(refPos) !== undefined;\n}\nexport function refHasRangeLabels(refPos) {\n  return refGetRangeLabels(refPos) !== undefined;\n}\nexport const DetachedReferencePosition = -1;\nexport function minReferencePosition(a, b) {\n  if (compareReferencePositions(a, b) < 0) {\n    return a;\n  } else {\n    return b;\n  }\n}\nexport function maxReferencePosition(a, b) {\n  if (compareReferencePositions(a, b) > 0) {\n    return a;\n  } else {\n    return b;\n  }\n}\nexport function compareReferencePositions(a, b) {\n  const aSeg = a.getSegment();\n  const bSeg = b.getSegment();\n\n  if (aSeg === bSeg) {\n    return a.getOffset() - b.getOffset();\n  } else {\n    if (aSeg === undefined || bSeg !== undefined && aSeg.ordinal < bSeg.ordinal) {\n      return -1;\n    } else {\n      return 1;\n    }\n  }\n} //# sourceMappingURL=referencePositions.js.map","map":null,"metadata":{},"sourceType":"module"}
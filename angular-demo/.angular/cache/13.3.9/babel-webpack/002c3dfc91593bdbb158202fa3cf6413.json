{"ast":null,"code":"/*!\n * Copyright (c) Microsoft Corporation and contributors. All rights reserved.\n * Licensed under the MIT License.\n */\nimport { DirectoryFactory, MapFactory, SharedDirectory, SharedMap } from \"@fluidframework/map\";\nimport { FluidDataStoreRuntime } from \"@fluidframework/datastore\";\nimport { PureDataObjectFactory } from \"./pureDataObjectFactory\";\n/**\n * DataObjectFactory is the IFluidDataStoreFactory for use with DataObjects.\n * It facilitates DataObject's features (such as its shared directory) by\n * ensuring relevant shared objects etc are available to the factory.\n *\n * @typeParam TObj - DataObject (concrete type)\n * @typeParam I - The input types for the DataObject\n */\n\nexport class DataObjectFactory extends PureDataObjectFactory {\n  constructor(type, ctor, sharedObjects = [], optionalProviders, registryEntries, runtimeFactory = FluidDataStoreRuntime) {\n    const mergedObjects = [...sharedObjects];\n\n    if (!sharedObjects.find(factory => factory.type === DirectoryFactory.Type)) {\n      // User did not register for directory\n      mergedObjects.push(SharedDirectory.getFactory());\n    } // TODO: Remove SharedMap factory when compatibility with SharedMap DataObject is no longer needed in 0.10\n\n\n    if (!sharedObjects.find(factory => factory.type === MapFactory.Type)) {\n      // User did not register for map\n      mergedObjects.push(SharedMap.getFactory());\n    }\n\n    super(type, ctor, mergedObjects, optionalProviders, registryEntries, runtimeFactory);\n  }\n\n} //# sourceMappingURL=dataObjectFactory.js.map","map":null,"metadata":{},"sourceType":"module"}
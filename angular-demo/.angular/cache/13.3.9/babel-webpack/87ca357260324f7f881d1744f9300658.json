{"ast":null,"code":"/*!\n * Copyright (c) Microsoft Corporation and contributors. All rights reserved.\n * Licensed under the MIT License.\n */\nimport { isRuntimeMessage } from \"@fluidframework/driver-utils\";\nexport class OpTracker {\n  constructor(deltaManager, disabled) {\n    /**\n     * Used for storing the message content size when\n     * the message is pushed onto the inbound queue.\n     */\n    this.messageSize = new Map();\n    this._nonSystemOpCount = 0;\n    this._opsSizeAccumulator = 0;\n\n    if (disabled) {\n      return;\n    } // Record the message content size when we receive it.\n    // We should not log this value, as summarization can happen between the time the message\n    // is received and until it is processed (the 'op' event).\n\n\n    deltaManager.inbound.on(\"push\", message => {\n      // Some messages my already have string contents at this point,\n      // so stringifying them again will add inaccurate overhead.\n      const messageContent = typeof message.contents === \"string\" ? message.contents : JSON.stringify(message.contents);\n      const messageData = OpTracker.messageHasData(message) ? message.data : \"\";\n      this.messageSize[OpTracker.messageId(message)] = messageContent.length + messageData.length;\n    });\n    deltaManager.on(\"op\", message => {\n      var _a;\n\n      this._nonSystemOpCount += !isRuntimeMessage(message) ? 0 : 1;\n      const id = OpTracker.messageId(message);\n      this._opsSizeAccumulator += (_a = this.messageSize[id]) !== null && _a !== void 0 ? _a : 0;\n      this.messageSize.delete(id);\n    });\n  }\n\n  get nonSystemOpCount() {\n    return this._nonSystemOpCount;\n  }\n\n  get opsSizeAccumulator() {\n    return this._opsSizeAccumulator;\n  }\n\n  static messageId(message) {\n    return message.sequenceNumber;\n  }\n\n  static messageHasData(message) {\n    return message.data !== undefined;\n  }\n\n  reset() {\n    this._nonSystemOpCount = 0;\n    this._opsSizeAccumulator = 0;\n  }\n\n} //# sourceMappingURL=opTelemetry.js.map","map":null,"metadata":{},"sourceType":"module"}
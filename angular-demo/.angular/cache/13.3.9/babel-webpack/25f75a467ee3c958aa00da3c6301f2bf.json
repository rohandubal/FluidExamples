{"ast":null,"code":"/*!\n * Copyright (c) Microsoft Corporation and contributors. All rights reserved.\n * Licensed under the MIT License.\n */\n\n/**\n * Represents errors associated with network communication.\n *\n * @remarks\n * The Fluid Framework server implementation includes a collection of services that communicate with each other\n * over the network. Network communication is subject to a diverse range of errors. {@link NetworkError} helps\n * convey more information than a simple HTTP status code, allowing services to be aware of the context of a\n * network error and making those services more prepared to react to such kinds of errors.\n */\nexport class NetworkError extends Error {\n  constructor(\n  /**\n   * HTTP status code that describes the error.\n   * @public\n   */\n  code,\n  /**\n   * The message associated with the error.\n   * @public\n   */\n  message,\n  /**\n   * Optional boolean indicating whether this is an error that can be retried.\n   * Only relevant when {@link NetworkError.isFatal} is false.\n   * @public\n   */\n  canRetry,\n  /**\n   * Optional boolean indicating whether this error is fatal. This generally indicates that the error causes\n   * negative, non-recoverable impact to the component/caller and cannot be ignored.\n   * @public\n   */\n  isFatal,\n  /**\n   * Optional value representing the time in milliseconds that should be waited before retrying.\n   * @public\n   */\n  retryAfterMs) {\n    super(message);\n    this.code = code;\n    this.canRetry = canRetry;\n    this.isFatal = isFatal;\n    this.retryAfterMs = retryAfterMs;\n    this.name = \"NetworkError\";\n    this.retryAfter = retryAfterMs !== undefined ? retryAfterMs / 1000 : undefined;\n  }\n  /**\n   * Gets the details associated with this {@link NetworkError}.\n   * @returns A simple string conveying the message if no other details are included in this {@link NetworkError},\n   * or an {@link INetworkErrorDetails} object otherwise.\n   * @public\n   */\n\n\n  get details() {\n    if (this.canRetry === undefined && this.isFatal === undefined && this.retryAfterMs === undefined) {\n      return this.message;\n    }\n\n    return {\n      message: this.message,\n      canRetry: this.canRetry,\n      isFatal: this.isFatal,\n      retryAfter: this.retryAfter,\n      retryAfterMs: this.retryAfterMs\n    };\n  }\n  /**\n   * Explicitly define how to serialize as JSON so that socket.io can emit relevant info.\n   * @public\n   */\n\n\n  toJSON() {\n    return {\n      code: this.code,\n      message: this.message,\n      canRetry: this.canRetry,\n      isFatal: this.isFatal,\n      retryAfterMs: this.retryAfterMs,\n      retryAfter: this.retryAfter\n    };\n  }\n\n}\nexport function isNetworkError(error) {\n  return error.name === \"NetworkError\" && typeof error.code === \"number\" && typeof error.message === \"string\";\n}\n/**\n * Convenience function for generating a {@link NetworkError}.\n * @remarks Generates a {@link NetworkError} instance appropriately configured given the status code and error data\n * provided. This function is intended to be used in situations where a {@link NetworkError} is dynamically created\n * based variable parameters. That is, when it is not known whether the status code can be 404 or 500.\n * @param statusCode - HTTP status code that describes the error.\n * @param errorData - Optional additional data associated with the error. Can either be a simple string representing\n *  the message, or an {@link INetworkErrorDetails} object.\n * @returns A {@link NetworkError} instance properly configured according to the parameters provided.\n * @public\n */\n\nexport function createFluidServiceNetworkError(statusCode, errorData) {\n  var _a;\n\n  let message;\n  let canRetry;\n  let isFatal;\n  let retryAfter;\n\n  if (errorData && typeof errorData === \"object\") {\n    message = (_a = errorData.message) !== null && _a !== void 0 ? _a : \"Unknown Error\";\n    canRetry = errorData.canRetry;\n    isFatal = errorData.isFatal;\n    retryAfter = errorData.retryAfter;\n  } else if (errorData && typeof errorData === \"string\") {\n    message = errorData;\n  } else {\n    message = \"Unknown Error\";\n  }\n\n  switch (statusCode) {\n    case 401:\n    case 403:\n    case 404:\n      return new NetworkError(statusCode, message, false,\n      /* canRetry */\n      false);\n\n    /* isFatal */\n\n    case 413:\n    case 422:\n      return new NetworkError(statusCode, message, canRetry !== null && canRetry !== void 0 ? canRetry : false,\n      /* canRetry */\n      isFatal !== null && isFatal !== void 0 ? isFatal : false,\n      /* isFatal */\n      canRetry ? retryAfter : undefined);\n\n    case 429:\n      return new NetworkError(statusCode, message, true,\n      /* canRetry */\n      false,\n      /* isFatal */\n      retryAfter);\n\n    case 500:\n      {\n        return new NetworkError(statusCode, message, canRetry !== null && canRetry !== void 0 ? canRetry : true,\n        /* canRetry */\n        isFatal !== null && isFatal !== void 0 ? isFatal : false,\n        /* isFatal */\n        canRetry ? retryAfter : undefined);\n      }\n\n    case 502:\n    case 503:\n    case 504:\n      return new NetworkError(statusCode, message, true,\n      /* canRetry */\n      false,\n      /* isFatal */\n      retryAfter);\n\n    default:\n      return new NetworkError(statusCode, message, false,\n      /* canRetry */\n      true);\n\n    /* isFatal */\n  }\n}\n/**\n * Convenience function to both generate and throw a {@link NetworkError}.\n * @remarks Similarly to {@link createFluidServiceNetworkError}, this function generates a {@link NetworkError}\n * instance appropriately configured given the status code and error data provided. The difference is that this\n * function also throws the {@link NetworkError}.\n * @param statusCode - HTTP status code that describes the error.\n * @param errorData - Optional additional data associated with the error. Can either be a simple string representing\n *  the message, or an {@link INetworkErrorDetails} object.\n * @public\n */\n\nexport function throwFluidServiceNetworkError(statusCode, errorData) {\n  const networkError = createFluidServiceNetworkError(statusCode, errorData);\n  throw networkError;\n} //# sourceMappingURL=error.js.map","map":null,"metadata":{},"sourceType":"module"}
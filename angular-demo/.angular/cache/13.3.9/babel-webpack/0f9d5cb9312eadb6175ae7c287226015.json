{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Users\\\\sdeshpande\\\\Documents\\\\FluidExamples\\\\angular-demo\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\n\n/*!\n * Copyright (c) Microsoft Corporation and contributors. All rights reserved.\n * Licensed under the MIT License.\n */\nimport { assert, bufferToString, stringToBuffer } from \"@fluidframework/common-utils\";\n/**\n * A storage wrapper that can serialize blobs from a snapshot tree and then use them to rehydrate.\n * Used in offline load/attached dehydration to save snapshot blobs that are still needed but may have been deleted.\n */\n\nexport class SerializedSnapshotStorage {\n  constructor(storageGetter, blobs) {\n    this.storageGetter = storageGetter;\n    this.blobs = blobs;\n  }\n\n  static serializeTree(snapshot, storage) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const blobs = {};\n      yield _this.serializeTreeCore(snapshot, blobs, storage);\n      return blobs;\n    })();\n  }\n\n  static serializeTreeCore(tree, blobs, storage) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      const treePs = [];\n\n      for (const subTree of Object.values(tree.trees)) {\n        treePs.push(_this2.serializeTreeCore(subTree, blobs, storage));\n      }\n\n      for (const id of Object.values(tree.blobs)) {\n        const blob = yield storage.readBlob(id); // ArrayBufferLike will not survive JSON.stringify()\n\n        blobs[id] = bufferToString(blob, \"utf8\");\n      }\n\n      return Promise.all(treePs);\n    })();\n  }\n\n  static serializeTreeWithBlobContents(snapshot) {\n    const blobs = {};\n    this.serializeTreeWithBlobContentsCore(snapshot, blobs);\n    return blobs;\n  }\n\n  static serializeTreeWithBlobContentsCore(tree, blobs) {\n    for (const subTree of Object.values(tree.trees)) {\n      this.serializeTreeWithBlobContentsCore(subTree, blobs);\n    }\n\n    for (const id of Object.values(tree.blobs)) {\n      const blob = tree.blobsContents[id];\n      assert(!!blob, 0x2ec\n      /* \"Blob must be present in blobsContents\" */\n      ); // ArrayBufferLike will not survive JSON.stringify()\n\n      blobs[id] = bufferToString(blob, \"utf8\");\n    }\n  }\n\n  get storage() {\n    // avoid calling it until we need it since it will be undefined if we're not connected\n    // and we shouldn't need it in this case anyway\n    if (this._storage) {\n      return this._storage;\n    }\n\n    this._storage = this.storageGetter();\n    return this._storage;\n  }\n\n  get repositoryUrl() {\n    return this.storage.repositoryUrl;\n  }\n  /**\n   * Reads the object with the given ID, returns content in arrayBufferLike\n   */\n\n\n  readBlob(id) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this3.blobs[id] !== undefined) {\n        return stringToBuffer(_this3.blobs[id], \"utf8\");\n      }\n\n      return _this3.storage.readBlob(id);\n    })();\n  }\n  /**\n   * Returns the snapshot tree.\n   */\n  // eslint-disable-next-line @rushstack/no-new-null\n\n\n  getSnapshotTree(version) {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      return _this4.storage.getSnapshotTree(version);\n    })();\n  }\n  /**\n   * Retrieves all versions of the document starting at the specified versionId - or null if from the head\n   */\n  // eslint-disable-next-line @rushstack/no-new-null\n\n\n  getVersions(versionId, count) {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      return _this5.storage.getVersions(versionId, count);\n    })();\n  }\n  /**\n   * Creates a blob out of the given buffer\n   */\n\n\n  createBlob(file) {\n    var _this6 = this;\n\n    return _asyncToGenerator(function* () {\n      return _this6.storage.createBlob(file);\n    })();\n  }\n  /**\n   * Uploads a summary tree to storage using the given context for reference of previous summary handle.\n   * The ISummaryHandles in the uploaded tree should have paths to indicate which summary object they are\n   * referencing from the previously acked summary.\n   * Returns the uploaded summary handle.\n   */\n\n\n  uploadSummaryWithContext(summary, context) {\n    var _this7 = this;\n\n    return _asyncToGenerator(function* () {\n      return _this7.storage.uploadSummaryWithContext(summary, context);\n    })();\n  }\n  /**\n   * Retrieves the commit that matches the packfile handle. If the packfile has already been committed and the\n   * server has deleted it this call may result in a broken promise.\n   */\n\n\n  downloadSummary(handle) {\n    var _this8 = this;\n\n    return _asyncToGenerator(function* () {\n      return _this8.storage.downloadSummary(handle);\n    })();\n  }\n\n} //# sourceMappingURL=serializedSnapshotStorage.js.map","map":null,"metadata":{},"sourceType":"module"}
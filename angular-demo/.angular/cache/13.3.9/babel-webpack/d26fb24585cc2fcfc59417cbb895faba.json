{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Users\\\\sdeshpande\\\\Documents\\\\FluidExamples\\\\angular-demo\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\n\n/*!\n * Copyright (c) Microsoft Corporation and contributors. All rights reserved.\n * Licensed under the MIT License.\n */\nimport { generateHandleContextPath } from \"@fluidframework/runtime-utils\";\nexport class FluidObjectHandle {\n  /**\n   * Creates a new FluidObjectHandle.\n   * @param value - The FluidObject object this handle is for.\n   * @param path - The path to this handle relative to the routeContext.\n   * @param routeContext - The parent IFluidHandleContext that has a route to this handle.\n   */\n  constructor(value, path, routeContext) {\n    this.value = value;\n    this.path = path;\n    this.routeContext = routeContext;\n    this.pendingHandlesToMakeVisible = new Set(); // Tracks whether this handle is locally visible in the container.\n\n    this.locallyVisible = false;\n    this.absolutePath = generateHandleContextPath(path, this.routeContext);\n  }\n\n  get IFluidHandle() {\n    return this;\n  }\n\n  get isAttached() {\n    return this.routeContext.isAttached;\n  }\n  /**\n   * Tells whether the object of this handle is visible in the container locally or globally.\n   */\n\n\n  get visible() {\n    /**\n     * If the object of this handle is attached, it is visible in the container. Ideally, checking local visibility\n     * should be enough for a handle. However, there are scenarios where the object becomes locally visible but the\n     * handle does not know this - This will happen is attachGraph is never called on the handle. Couple of examples\n     * where this can happen:\n     * 1. Handles to DDS other than the default handle won't know if the DDS becomes visible after the handle was\n     *    created.\n     * 2. Handles to root data stores will never know that it was visible because the handle will not be stores in\n     *    another DDS and so, attachGraph will never be called on it.\n     */\n    return this.isAttached || this.locallyVisible;\n  }\n\n  get() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      return _this.value;\n    })();\n  }\n\n  attachGraph() {\n    if (this.visible) {\n      return;\n    }\n\n    this.locallyVisible = true;\n    this.pendingHandlesToMakeVisible.forEach(handle => {\n      handle.attachGraph();\n    });\n    this.pendingHandlesToMakeVisible.clear();\n    this.routeContext.attachGraph();\n  }\n\n  bind(handle) {\n    // If this handle is visible, attach the graph of the incoming handle as well.\n    if (this.visible) {\n      handle.attachGraph();\n      return;\n    }\n\n    this.pendingHandlesToMakeVisible.add(handle);\n  }\n\n} //# sourceMappingURL=fluidHandle.js.map","map":null,"metadata":{},"sourceType":"module"}
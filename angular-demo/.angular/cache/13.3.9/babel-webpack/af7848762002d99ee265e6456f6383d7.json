{"ast":null,"code":"/*!\n * Copyright (c) Microsoft Corporation and contributors. All rights reserved.\n * Licensed under the MIT License.\n */\nimport { Timer } from \"@fluidframework/common-utils\";\n/** Simple implementation of class for tracking summarize heuristic data. */\n\nexport class SummarizeHeuristicData {\n  constructor(lastOpSequenceNumber,\n  /** Baseline attempt data used for comparisons with subsequent attempts/calculations. */\n  attemptBaseline) {\n    this.lastOpSequenceNumber = lastOpSequenceNumber;\n    this._lastAttempt = attemptBaseline;\n    this._lastSuccessfulSummary = Object.assign({}, attemptBaseline);\n  }\n\n  get lastAttempt() {\n    return this._lastAttempt;\n  }\n\n  get lastSuccessfulSummary() {\n    return this._lastSuccessfulSummary;\n  }\n\n  updateWithLastSummaryAckInfo(lastSummary) {\n    this._lastAttempt = lastSummary;\n    this._lastSuccessfulSummary = Object.assign({}, lastSummary);\n  }\n\n  recordAttempt(refSequenceNumber) {\n    this._lastAttempt = {\n      refSequenceNumber: refSequenceNumber !== null && refSequenceNumber !== void 0 ? refSequenceNumber : this.lastOpSequenceNumber,\n      summaryTime: Date.now()\n    };\n  }\n\n  markLastAttemptAsSuccessful() {\n    this._lastSuccessfulSummary = Object.assign({}, this.lastAttempt);\n  }\n\n}\n/**\n * This class contains the heuristics for when to summarize.\n */\n\nexport class SummarizeHeuristicRunner {\n  constructor(heuristicData, configuration, trySummarize, logger) {\n    this.heuristicData = heuristicData;\n    this.configuration = configuration;\n    this.trySummarize = trySummarize;\n    this.logger = logger;\n    this.idleTimer = new Timer(this.configuration.idleTime, () => this.trySummarize(\"idle\"));\n    this.minOpsForLastSummaryAttempt = this.configuration.minOpsForLastSummaryAttempt;\n  }\n\n  get opsSinceLastAck() {\n    return this.heuristicData.lastOpSequenceNumber - this.heuristicData.lastSuccessfulSummary.refSequenceNumber;\n  }\n\n  run() {\n    const timeSinceLastSummary = Date.now() - this.heuristicData.lastSuccessfulSummary.summaryTime;\n    const opsSinceLastAck = this.opsSinceLastAck;\n\n    if (timeSinceLastSummary > this.configuration.maxTime) {\n      this.idleTimer.clear();\n      this.trySummarize(\"maxTime\");\n    } else if (opsSinceLastAck > this.configuration.maxOps) {\n      this.idleTimer.clear();\n      this.trySummarize(\"maxOps\");\n    } else {\n      this.idleTimer.restart();\n    }\n  }\n\n  shouldRunLastSummary() {\n    const opsSinceLastAck = this.opsSinceLastAck;\n    const minOpsForLastSummaryAttempt = this.minOpsForLastSummaryAttempt;\n    this.logger.sendTelemetryEvent({\n      eventName: \"ShouldRunLastSummary\",\n      opsSinceLastAck,\n      minOpsForLastSummaryAttempt\n    });\n    return opsSinceLastAck >= minOpsForLastSummaryAttempt;\n  }\n\n  dispose() {\n    this.idleTimer.clear();\n  }\n\n} //# sourceMappingURL=summarizerHeuristics.js.map","map":null,"metadata":{},"sourceType":"module"}
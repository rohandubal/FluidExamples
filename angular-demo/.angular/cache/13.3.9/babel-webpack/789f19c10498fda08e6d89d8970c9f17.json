{"ast":null,"code":"/*!\n * Copyright (c) Microsoft Corporation and contributors. All rights reserved.\n * Licensed under the MIT License.\n */\nimport { isOnline, OnlineStatus, canRetryOnError } from \"./network\";\nexport function logNetworkFailure(logger, event, error) {\n  var _a, _b;\n\n  const newEvent = Object.assign({}, event);\n  const errorOnlineProp = error.online;\n  newEvent.online = typeof errorOnlineProp === \"string\" ? errorOnlineProp : OnlineStatus[isOnline()];\n\n  if (typeof navigator === \"object\" && navigator !== null) {\n    const nav = navigator;\n    const connection = (_b = (_a = nav.connection) !== null && _a !== void 0 ? _a : nav.mozConnection) !== null && _b !== void 0 ? _b : nav.webkitConnection;\n\n    if (connection !== null && typeof connection === \"object\") {\n      newEvent.connectionType = connection.type;\n    }\n  } // non-retryable errors are fatal and should be logged as errors\n\n\n  newEvent.category = canRetryOnError(error) ? \"generic\" : \"error\";\n  logger.sendTelemetryEvent(newEvent, error);\n}\n/**\n * Wait for browser to get to connected state.\n * If connected, waits minimum of minDelay anyway (between network retries)\n * If disconnected, polls every 30 seconds anyway, to make sure we are not getting stuck because of wrong signal\n * Note that browsers will have false positives (like having Hyper-V adapter on machine,\n * or machine connected to router that is not connected to internet)\n * But there should be no false negatives.\n * The only exception - Opera returns false when user enters \"Work Offline\" mode, regardless of actual connectivity.\n */\n// eslint-disable-next-line @typescript-eslint/promise-function-async\n\nexport function waitForConnectedState(minDelay) {\n  // Use this frequency to poll even when we are offline and able to setup online/offline listener\n  // This is mostly safety net\n  const offlinePollFrequency = 30000;\n  return new Promise(resolve => {\n    let listener = resolve;\n    let delay = minDelay;\n\n    if (isOnline() === OnlineStatus.Offline) {\n      if ((window === null || window === void 0 ? void 0 : window.addEventListener) !== undefined) {\n        listener = () => {\n          resolve();\n          window.removeEventListener(\"online\", listener);\n        };\n\n        window.addEventListener(\"online\", listener, false);\n        delay = Math.max(minDelay, offlinePollFrequency);\n      }\n    }\n\n    setTimeout(listener, delay);\n  });\n} //# sourceMappingURL=networkUtils.js.map","map":null,"metadata":{},"sourceType":"module"}
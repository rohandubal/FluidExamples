{"ast":null,"code":"/*!\n * Copyright (c) Microsoft Corporation and contributors. All rights reserved.\n * Licensed under the MIT License.\n */\nimport { EventEmitter } from \"events\";\n/**\n * Audience represents all clients connected to the op stream.\n */\n\nexport class Audience extends EventEmitter {\n  constructor() {\n    super(...arguments);\n    this.members = new Map();\n  }\n\n  on(event, listener) {\n    return super.on(event, listener);\n  }\n  /**\n   * Adds a new client to the audience\n   */\n\n\n  addMember(clientId, details) {\n    this.members.set(clientId, details);\n    this.emit(\"addMember\", clientId, details);\n  }\n  /**\n   * Removes a client from the audience. Only emits an event if a client is actually removed\n   * @returns if a client was removed from the audience\n   */\n\n\n  removeMember(clientId) {\n    const removedClient = this.members.get(clientId);\n\n    if (removedClient !== undefined) {\n      this.members.delete(clientId);\n      this.emit(\"removeMember\", clientId, removedClient);\n      return true;\n    } else {\n      return false;\n    }\n  }\n  /**\n   * Retrieves all the members in the audience\n   */\n\n\n  getMembers() {\n    return new Map(this.members);\n  }\n  /**\n   * Retrieves a specific member of the audience\n   */\n\n\n  getMember(clientId) {\n    return this.members.get(clientId);\n  }\n  /**\n   * Clears the audience\n   */\n\n\n  clear() {\n    const clientIds = this.members.keys();\n\n    for (const clientId of clientIds) {\n      this.removeMember(clientId);\n    }\n  }\n\n} //# sourceMappingURL=audience.js.map","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Users\\\\sdeshpande\\\\Documents\\\\FluidExamples\\\\angular-demo\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\n\n/*!\n * Copyright (c) Microsoft Corporation and contributors. All rights reserved.\n * Licensed under the MIT License.\n */\nimport { MapFactory, SharedDirectory } from \"@fluidframework/map\";\nimport { RequestParser, create404Response } from \"@fluidframework/runtime-utils\";\nimport { PureDataObject } from \"./pureDataObject\";\n/**\n * DataObject is a base data store that is primed with a root directory. It\n * ensures that it is created and ready before you can access it.\n *\n * Having a single root directory allows for easier development. Instead of creating\n * and registering channels with the runtime any new DDS that is set on the root\n * will automatically be registered.\n *\n * @typeParam I - The optional input types used to strongly type the data object\n */\n\nexport class DataObject extends PureDataObject {\n  constructor() {\n    super(...arguments);\n    this.rootDirectoryId = \"root\";\n  }\n  /**\n   * {@inheritDoc PureDataObject.request}\n   */\n\n\n  request(request) {\n    var _superprop_getRequest = () => super.request,\n        _this = this;\n\n    return _asyncToGenerator(function* () {\n      const requestParser = RequestParser.create(request);\n      const itemId = requestParser.pathParts[0];\n\n      if (itemId === \"bigBlobs\") {\n        const value = _this.root.get(requestParser.pathParts.join(\"/\"));\n\n        if (value === undefined) {\n          return create404Response(requestParser);\n        }\n\n        return {\n          mimeType: \"fluid/object\",\n          status: 200,\n          value\n        };\n      } else {\n        return _superprop_getRequest().call(_this, requestParser);\n      }\n    })();\n  }\n  /**\n   * The root directory will either be ready or will return an error. If an error is thrown\n   * the root has not been correctly created/set.\n   */\n\n\n  get root() {\n    if (!this.internalRoot) {\n      throw new Error(this.getUninitializedErrorString(`root`));\n    }\n\n    return this.internalRoot;\n  }\n  /**\n   * Initializes internal objects and calls initialization overrides.\n   * Caller is responsible for ensuring this is only invoked once.\n   */\n\n\n  initializeInternal(existing) {\n    var _superprop_getInitializeInternal = () => super.initializeInternal,\n        _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      if (!existing) {\n        // Create a root directory and register it before calling initializingFirstTime\n        _this2.internalRoot = SharedDirectory.create(_this2.runtime, _this2.rootDirectoryId);\n\n        _this2.internalRoot.bindToContext();\n      } else {\n        // data store has a root directory so we just need to set it before calling initializingFromExisting\n        _this2.internalRoot = yield _this2.runtime.getChannel(_this2.rootDirectoryId); // This will actually be an ISharedMap if the channel was previously created by the older version of\n        // DataObject which used a SharedMap.  Since SharedMap and SharedDirectory are compatible unless\n        // SharedDirectory-only commands are used on SharedMap, this will mostly just work for compatibility.\n\n        if (_this2.internalRoot.attributes.type === MapFactory.Type) {\n          _this2.runtime.logger.send({\n            category: \"generic\",\n            eventName: \"MapDataObject\",\n            message: \"Legacy document, SharedMap is masquerading as SharedDirectory in DataObject\"\n          });\n        }\n      }\n\n      yield _superprop_getInitializeInternal().call(_this2, existing);\n    })();\n  }\n  /**\n   * Generates an error string indicating an item is uninitialized.\n   * @param item - The name of the item that was uninitialized.\n   */\n\n\n  getUninitializedErrorString(item) {\n    return `${item} must be initialized before being accessed.`;\n  }\n\n} //# sourceMappingURL=dataObject.js.map","map":null,"metadata":{},"sourceType":"module"}
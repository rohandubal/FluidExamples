{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Users\\\\sdeshpande\\\\Documents\\\\FluidExamples\\\\angular-demo\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\n\n/*!\n * Copyright (c) Microsoft Corporation and contributors. All rights reserved.\n * Licensed under the MIT License.\n */\nexport function getNormalizedObjectStoragePathParts(path) {\n  let normalizePath = path;\n\n  if (normalizePath.startsWith(\"/\")) {\n    normalizePath = normalizePath.substr(1);\n  }\n\n  if (normalizePath.endsWith(\"/\")) {\n    normalizePath = normalizePath.substr(0, normalizePath.length - 1);\n  }\n\n  if (normalizePath.length > 0) {\n    return normalizePath.split(\"/\");\n  }\n\n  return [];\n}\nexport function listBlobsAtTreePath(_x, _x2) {\n  return _listBlobsAtTreePath.apply(this, arguments);\n} //# sourceMappingURL=objectstorageutils.js.map\n\nfunction _listBlobsAtTreePath() {\n  _listBlobsAtTreePath = _asyncToGenerator(function* (inputTree, path) {\n    const pathParts = getNormalizedObjectStoragePathParts(path);\n    let tree = inputTree;\n\n    while ((tree === null || tree === void 0 ? void 0 : tree.entries) !== undefined && pathParts.length > 0) {\n      const part = pathParts.shift();\n      const treeEntry = tree.entries.find(value => {\n        if (value.type === \"Tree\" && value.path === part) {\n          return true;\n        } else {\n          return false;\n        }\n      }); // this check is largely superfluous due to the same check being done\n      // immediately above. the type system, however, is not aware of this.\n      // so we must redundantly determine that the entry's type is \"Tree\"\n\n      if ((treeEntry === null || treeEntry === void 0 ? void 0 : treeEntry.type) === \"Tree\") {\n        tree = treeEntry.value;\n      } else {\n        tree = undefined;\n      }\n    }\n\n    if ((tree === null || tree === void 0 ? void 0 : tree.entries) === undefined || pathParts.length !== 0) {\n      throw new Error(\"path does not exist\");\n    }\n\n    return tree.entries.filter(e => e.type === \"Blob\").map(e => e.path);\n  });\n  return _listBlobsAtTreePath.apply(this, arguments);\n}","map":null,"metadata":{},"sourceType":"module"}
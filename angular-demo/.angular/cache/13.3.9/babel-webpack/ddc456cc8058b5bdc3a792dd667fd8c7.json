{"ast":null,"code":"/*!\n * Copyright (c) Microsoft Corporation and contributors. All rights reserved.\n * Licensed under the MIT License.\n */\n\n/**\n * A rate limiter to make sure that a client can only request help for one task within a time window.\n */\nexport class RateLimiter {\n  /**\n   * Creates a rate limiter that keep track of the request it has made\n   *\n   * @param windowMSec - time in millisecond, use to filter out messages\n   * for a clientId if the last request falls within this time window\n   */\n  constructor(windowMSec) {\n    this.windowMSec = windowMSec;\n    this.requestMap = new Map();\n  }\n  /**\n   * Filter out the messages that had already been requested within the time window\n   *\n   * @param clientId - the clientId who want to send the message\n   * @param messages - the message we want to send\n   * @returns the message we approved to send that hasn't been sent recently\n   */\n\n\n  filter(clientId, messages) {\n    const approvedList = [];\n    const currentTime = Date.now();\n\n    for (const message of messages) {\n      const key = `${clientId}/${message}`;\n\n      if (!this.requestMap.has(key)) {\n        this.requestMap.set(key, currentTime);\n        approvedList.push(message);\n      } else if (this.requestMap.get(key) + this.windowMSec > currentTime) {\n        continue;\n      } else {\n        this.requestMap.set(key, currentTime);\n        approvedList.push(message);\n      }\n    }\n\n    return approvedList;\n  }\n\n} //# sourceMappingURL=rateLimiter.js.map","map":null,"metadata":{},"sourceType":"module"}
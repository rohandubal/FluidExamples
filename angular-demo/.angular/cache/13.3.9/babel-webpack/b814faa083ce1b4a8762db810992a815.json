{"ast":null,"code":"/*!\n * Copyright (c) Microsoft Corporation and contributors. All rights reserved.\n * Licensed under the MIT License.\n */\nimport { assert, EventForwarder, doIfNotDisposed } from \"@fluidframework/common-utils\";\n/**\n * Proxies Quorum events.\n */\n\nexport class QuorumProxy extends EventForwarder {\n  constructor(quorum) {\n    super(quorum); // This is heavily used object, increase limit at which Node prints warnings.\n\n    super.setMaxListeners(50);\n    this.propose = doIfNotDisposed(this, quorum.propose.bind(quorum));\n    this.has = doIfNotDisposed(this, quorum.has.bind(quorum));\n    this.get = doIfNotDisposed(this, quorum.get.bind(quorum));\n    this.getMembers = doIfNotDisposed(this, quorum.getMembers.bind(quorum));\n    this.getMember = doIfNotDisposed(this, quorum.getMember.bind(quorum));\n  }\n\n}\nexport function getCodeDetailsFromQuorumValues(quorumValues) {\n  const qValuesMap = new Map(quorumValues);\n  const proposal = qValuesMap.get(\"code\");\n  assert(proposal !== undefined, 0x2dc\n  /* \"Cannot find code proposal\" */\n  );\n  return proposal === null || proposal === void 0 ? void 0 : proposal.value;\n}\nexport function initQuorumValuesFromCodeDetails(source) {\n  // Seed the base quorum to be an empty list with a code quorum set\n  const committedCodeProposal = {\n    key: \"code\",\n    value: source,\n    approvalSequenceNumber: 0,\n    commitSequenceNumber: 0,\n    sequenceNumber: 0\n  };\n  return [[\"code\", committedCodeProposal]];\n} //# sourceMappingURL=quorum.js.map","map":null,"metadata":{},"sourceType":"module"}
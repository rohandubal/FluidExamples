{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Users\\\\sdeshpande\\\\Documents\\\\FluidExamples\\\\angular-demo\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\n\n/*!\n * Copyright (c) Microsoft Corporation and contributors. All rights reserved.\n * Licensed under the MIT License.\n */\n\n/**\n * Resolver that takes a list of url resolvers and then try each of them to resolve the url.\n * @param resolversList - List of url resolvers to be used to resolve the request.\n * @param request - Request to be resolved.\n */\nexport function configurableUrlResolver(_x, _x2) {\n  return _configurableUrlResolver.apply(this, arguments);\n}\n\nfunction _configurableUrlResolver() {\n  _configurableUrlResolver = _asyncToGenerator(function* (resolversList, request) {\n    let resolved;\n\n    for (const resolver of resolversList) {\n      resolved = yield resolver.resolve(Object.assign({}, request));\n\n      if (resolved !== undefined) {\n        return resolved;\n      }\n    }\n\n    return undefined;\n  });\n  return _configurableUrlResolver.apply(this, arguments);\n}\n\nexport class MultiUrlResolver {\n  constructor(urlResolvers) {\n    this.urlResolvers = urlResolvers;\n  }\n\n  static create(urlResolver) {\n    if (Array.isArray(urlResolver)) {\n      if (urlResolver.length === 1) {\n        return urlResolver[0];\n      }\n\n      return new MultiUrlResolver(urlResolver);\n    }\n\n    return urlResolver;\n  }\n\n  resolve(request) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      return configurableUrlResolver(_this.urlResolvers, request);\n    })();\n  }\n\n  getAbsoluteUrl(resolvedUrl, relativeUrl) {\n    return _asyncToGenerator(function* () {\n      throw new Error(\"Not implmented\");\n    })();\n  }\n\n} //# sourceMappingURL=multiUrlResolver.js.map","map":null,"metadata":{},"sourceType":"module"}